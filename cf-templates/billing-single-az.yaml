AWSTemplateFormatVersion: 2010-09-09
Description: InfluxDB Enterprise
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VpcId
          - SubnetId
          - AvailabilityZone
          - InfluxDBIngressCIDR
          - KeyName
          - SSHCIDR
      - Label:
          default: InfluxDB Configuration
        Parameters:
          - Username
          - Password
          - DataNodeDiskSize
          - DataNodeDiskIops
    ParameterLabels:
      VpcId:
        default: VPC ID
      SubnetId:
        default: Subnet (must be in the same VPC)
      AvailabilityZone:
        default: Availability zone of subnet
      KeyName:
        default: SSH Key Name
      InfluxDBIngressCIDR:
        default: InfluxDB ingress CIDR (Public IPv4 address range of InfluxDB users)
      SSHCIDR:
        default: >-
          SSH Access CIDR (Public IPv4 address range of the administrator's
          network)
      Username:
        default: InfluxDB Administrator Username
      Password:
        default: InfluxDB Administrator Password
      DataNodeInstanceType:
        default: InfluxDB Data Node Instance Type
      DataNodeDiskSize:
        default: InfluxDB Data Node Disk Size
      DataNodeDiskIops:
        default: InfluxDB Data Node Disk IOPS
      MetaNodeInstanceType:
        default: InfluxDB Meta Node Instance Type
      MonitorInstanceType:
        default: InfluxDB Monitor Instance Type
Parameters:
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
  SubnetId:
    Type: 'AWS::EC2::Subnet::Id'
    Description: Subnet in the Virtual Private Cloud (VPC) selected in the VpcId parameter.
  AvailabilityZone:
    Type: 'AWS::EC2::AvailabilityZone::Name'
    Description: Availability Zone of the subnet selected in the SubnetId parameter
  Username:
    Description: Username for the initial cluster administrator user
    Type: String
  Password:
    Description: Password for cluster administrator user
    Type: String
    NoEcho: true
  DataNodeInstanceType:
    Description: Instance type for data nodes
    Type: String
    Default: m5.xlarge
    AllowedValues:
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.16xlarge
      - m5.24xlarge
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.12xlarge
      - c5.18xlarge
      - c5.24xlarge
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.8xlarge
      - r5.12xlarge
      - r5.16xlarge
      - r5.24xlarge
      - r5.xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  DataNodeDiskSize:
    Description: Size in GB of the EBS io1 volume on each data node
    Type: Number
    Default: 250
  DataNodeDiskIops:
    Description: IOPS of the EBS io1 volume on each data node
    Type: Number
    Default: 1000
  MetaNodeInstanceType:
    Description: Instance type for meta nodes
    Type: String
    Default: t3.small
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
      - t3.small
      - t3.medium
      - t3.large
    ConstraintDescription: must be a valid EC2 instance type.
  MonitorInstanceType:
    Description: Instance type for monitoring node
    Type: String
    Default: t3.small
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
      - t3.small
      - t3.medium
      - t3.large
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InfluxDBIngressCIDR:
    Description: >-
      The IP address range that can be used to connect to the InfluxDB API
      endpoint
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  SSHCIDR:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Outputs:
  InfluxDBAPIEndpoint:
    Description: >-
      The ELB endpoint that can be used to access the InfluxDB API. Listens on
      port 8086.
    Value: !GetAtt 
      - InfluxDBLoadBalancer
      - DNSName
    Export:
      Name: !Join 
        - ':'
        - - !Ref 'AWS::StackName'
          - InfluxDBAPIEndpoint
Mappings:
  AMIRegionMap:
    us-east-1:
      Data: ami-0c63a32c3ab901af4
      Meta: ami-02f1f34d3582babdc
      Monitor: ami-090cf6257fe0c8a8c
Resources:
  InfluxDBPrivateHostedZone:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      Name: internal
      VPCs:
        - VPCId: !Ref VpcId
          VPCRegion: !Ref 'AWS::Region'
  InfluxDBLoadBalancerRecordSet:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: !Ref InfluxDBPrivateHostedZone
      RecordSets:
        - AliasTarget:
            DNSName: !GetAtt 
              - InfluxDBLoadBalancer
              - DNSName
            HostedZoneId: !GetAtt 
              - InfluxDBLoadBalancer
              - CanonicalHostedZoneNameID
          Name: influxdb.internal
          Type: A
  InfluxDBLoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      SecurityGroups:
        - !Ref InfluxDBALBSecurityGroup
      Subnets:
        - !Ref SubnetId
      Listeners:
        - InstancePort: '8086'
          LoadBalancerPort: '8086'
          Protocol: HTTP
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '30'
        Target: 'HTTP:8086/ping?verbose=true'
        Timeout: '10'
        UnhealthyThreshold: '3'
  InfluxDBInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref InfluxDBRole
  InfluxDBRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: InfluxDBPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:AttachNetworkInterface'
                  - 'ec2:AttachVolume'
                  - 'ec2:DescribeVolumes'
                  - 'ec2:DescribeVolumeStatus'
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DescribeTags'
                  - 'autoscaling:DescribeAutoScalingGroups'
                Resource: '*'
  SshSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow external SSH traffic from SSH CIDR
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHCIDR
      VpcId: !Ref VpcId
  InfluxDBALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Allow traffic from public internet to go to port 8086 on InfluxDB data
        nodes
      VpcId: !Ref VpcId
  InfluxDBALBSGIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref InfluxDBALBSecurityGroup
      IpProtocol: tcp
      FromPort: 8086
      ToPort: 8086
      CidrIp: !Ref InfluxDBIngressCIDR
  InfluxDBALBSGEgress:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !Ref InfluxDBALBSecurityGroup
      IpProtocol: tcp
      FromPort: 8086
      ToPort: 8086
      DestinationSecurityGroupId: !Ref InfluxDBDataNodeSecurityGroup
  InfluxDBDataNodeSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow traffic from ALB to go to port 8086 on InfluxDB data nodes
      VpcId: !Ref VpcId
  InfluxDBDataNodeSGIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref InfluxDBDataNodeSecurityGroup
      IpProtocol: tcp
      FromPort: 8086
      ToPort: 8086
      SourceSecurityGroupId: !Ref InfluxDBALBSecurityGroup
  InfluxDBInternalSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow all traffic between InfluxDB instances
      VpcId: !Ref VpcId
  InfluxDBInternalSGIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref InfluxDBInternalSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref InfluxDBInternalSecurityGroup
  InfluxDBInternalSGEgress:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !Ref InfluxDBInternalSecurityGroup
      IpProtocol: '-1'
      DestinationSecurityGroupId: !Ref InfluxDBInternalSecurityGroup
  MetaNodeLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          SetupNode:
            - SetAWSCLIRegion
            - SetLicense
            - SetHostnames
            - SetMonitor
            - AttachNetwork
            - AttachVolume
            - MountVolume
            - StartInfluxDB
            - StartTelegraf
            - ConfigureCluster
        SetAWSCLIRegion:
          files:
            /root/.aws/config:
              content: !Sub |
                [default]
                region = ${AWS::Region}
              mode: '000644'
              owner: root
              group: root
        SetLicense:
          files:
            /etc/default/influxdb-meta:
              content: INFLUXDB_ENTERPRISE_MARKETPLACE_ENV=aws
              mode: '000644'
              owner: root
              group: root
        SetHostnames:
          commands:
            01_set_instance_hostname:
              command: !Join 
                - ''
                - - set -x
                  - |+

                  - INFLUXDB_HOSTNAME=$( aws ec2 describe-tags
                  - '        --filters "Name=resource-id,Values=$INSTANCE_ID"'
                  - '        --query "Tags[?Key==''influxdb-hostname''].Value"'
                  - '        --output text )'
                  - |+

                  - >-
                    echo "INFLUXDB_HOSTNAME=$INFLUXDB_HOSTNAME" >>
                    /etc/default/influxdb-meta
                  - |+

        SetMonitor:
          files:
            /etc/default/telegraf:
              content: !Join 
                - ''
                - - MONITOR_HOSTNAME=
                  - !Ref MonitorDns
                  - |+

                  - MONITOR_USERNAME=
                  - !Ref Username
                  - |+

                  - MONITOR_PASSWORD=
                  - !Ref Password
                  - |+

              mode: '000644'
              owner: root
              group: root
        AttachNetwork:
          commands:
            01_attach_network:
              command: !Join 
                - ''
                - - set -x
                  - |+

                  - >-
                    # If network interface is not attached to this instance,
                    then attach it
                  - |+

                  - ENI_ID=$( aws ec2 describe-tags
                  - '        --filters "Name=resource-id,Values=$INSTANCE_ID"'
                  - '        --query "Tags[?Key==''influxdb-eni''].Value"'
                  - '        --output text )'
                  - |+

                  - STATUS=$( aws ec2 describe-network-interfaces
                  - '        --network-interface-ids $ENI_ID'
                  - '        --filters "Name=attachment.instance-id,Values=$INSTANCE_ID"'
                  - '        --query "NetworkInterfaces[0].Attachment.Status"'
                  - '        --output text )'
                  - |+

                  - '# TODO: switch to until ''attached'' loop'
                  - |+

                  - 'if ! [[ $STATUS =~ (attached|attaching) ]]; then'
                  - |+

                  - '# Wait until network interface is available'
                  - |+

                  - aws ec2 wait network-interface-available
                  - '        --network-interface-ids $ENI_ID'
                  - |+

                  - aws ec2 attach-network-interface
                  - '        --network-interface-id $ENI_ID'
                  - '        --instance-id $INSTANCE_ID'
                  - '        --device-index 1'
                  - |+

                  - >-
                    # Reload network to automatically enable eth1 via Amazon
                    Linux 2 ec2-net-utils
                  - |+

                  - systemctl restart network
                  - |+

                  - fi
                  - |+

        AttachVolume:
          commands:
            01_attach_volume:
              command: !Join 
                - ''
                - - set -x
                  - |+

                  - >-
                    # If EBS volume is not attached to this instance, then
                    attach it
                  - |+

                  - VOLUME_ID=$( aws ec2 describe-tags
                  - '        --filters "Name=resource-id,Values=$INSTANCE_ID"'
                  - '        --query "Tags[?Key==''influxdb-volume''].Value"'
                  - '        --output text )'
                  - |+

                  - STATUS=$( aws ec2 describe-volumes
                  - '        --volume-ids $VOLUME_ID'
                  - '        --filters "Name=attachment.instance-id,Values=$INSTANCE_ID"'
                  - '        --query "Volumes[0].Attachments[0].State"'
                  - '        --output text )'
                  - |+

                  - 'if ! [[ $STATUS =~ (attached|attaching) ]]; then'
                  - |+

                  - '# Wait until volume is available'
                  - |+

                  - aws ec2 wait volume-available
                  - '        --volume-ids $VOLUME_ID'
                  - |+

                  - aws ec2 attach-volume
                  - '        --volume-id $VOLUME_ID'
                  - '        --instance-id $INSTANCE_ID'
                  - '        --device /dev/xvdh'
                  - |+

                  - 'until [[ "$('
                  - aws ec2 describe-volume-status
                  - '        --volume-ids $VOLUME_ID'
                  - '        --query ''VolumeStatuses[0].VolumeStatus.Details[?Name==`io-enabled`].Status'''
                  - '        --output text'
                  - ')" == ''passed'' ]]; do sleep 5; done'
                  - |+

                  - fi
                  - |+

        MountVolume:
          commands:
            01_mount_volumes:
              command: !Join 
                - ''
                - - set -x
                  - |+

                  - /sbin/ebsnvme-id -b /dev/nvme1n1
                  - |+

                  - 'until [ -b $(readlink -f /dev/xvdh) ]; do sleep 1; done'
                  - |+

                  - 'if [[ "$(lsblk -no FSTYPE /dev/xvdh)" != "ext4" ]]; then'
                  - |+

                  - /usr/sbin/mkfs -t ext4 /dev/xvdh
                  - |+

                  - sleep 10
                  - |+

                  - fi
                  - |+

                  - mkdir -p /influxdb
                  - |+

                  - mount /dev/xvdh /influxdb
                  - |+

                  - /sbin/resize2fs /dev/xvdh
                  - |+

                  - mkdir -p /influxdb/meta /influxdb /influxdb/wal /influxdb/hh
                  - |+

                  - 'chown -R influxdb:influxdb /influxdb'
                  - |+

            02_set_fstab:
              command: !Join 
                - ''
                - - set -x
                  - |+

                  - DEVICE_UUID="$(blkid -s UUID -o value /dev/xvdh)"
                  - |+

                  - if grep -q "$DEVICE_UUID" /etc/fstab; then
                  - |+

                  - echo "fstab already set"
                  - |+

                  - else
                  - |+

                  - cp /etc/fstab /etc/fstab.original
                  - |+

                  - "echo -e \"UUID=$DEVICE_UUID\t/influxdb\text4\tdefaults,nofail\t0\t2\" >> /etc/fstab"
                  - |+

                  - fi
                  - |+

        StartInfluxDB:
          commands:
            01_enable_influxdb_service:
              command: systemctl enable influxdb-meta
            02_start_influxdb_service:
              command: systemctl start influxdb-meta
        StartTelegraf:
          commands:
            01_enable_telegraf_service:
              command: systemctl enable telegraf
            02_start_telegraf_service:
              command: systemctl start telegraf
        ConfigureCluster:
          commands:
            01_join_nodes:
              command: !Join 
                - ''
                - - set -x
                  - |+

                  - LEADER=$( aws ec2 describe-tags
                  - '        --filters "Name=resource-id,Values=$INSTANCE_ID"'
                  - '        --query "Tags[?Key==''influxdb-leader''].Value"'
                  - '        --output text )'
                  - |+

                  - 'if [[ $LEADER == ''true'' ]]; then'
                  - |+

                  - 'while [[ "$(curl -s -o /dev/null -w ''''%{http_code}'''' '
                  - !Ref MetaNodeDns00
                  - ':8091/status)" != ''200'' ]]; do sleep 5; done'
                  - |+

                  - 'influxd-ctl add-meta '
                  - !Ref MetaNodeDns00
                  - ':8091'
                  - |+

                  - 'influxd-ctl add-meta '
                  - !Ref MetaNodeDns01
                  - ':8091'
                  - |+

                  - 'influxd-ctl add-meta '
                  - !Ref MetaNodeDns02
                  - ':8091'
                  - |+

                  - 'influxd-ctl add-data '
                  - !Ref DataNodeDns03
                  - ':8088'
                  - |+

                  - 'influxd-ctl add-data '
                  - !Ref DataNodeDns04
                  - ':8088'
                  - |+

                  - 'curl -u '
                  - !Ref Username
                  - ':'
                  - !Ref Password
                  - ' "http://'
                  - !Ref DataNodeDns03
                  - ':8086/query"'
                  - '        --data-urlencode "q='
                  - 'CREATE USER '
                  - !Ref Username
                  - ' WITH PASSWORD '''
                  - !Ref Password
                  - ''' WITH ALL PRIVILEGES'
                  - '"'
                  - |+

                  - 'curl -u '
                  - !Ref Username
                  - ':'
                  - !Ref Password
                  - ' http://'
                  - !Ref DataNodeDns03
                  - ':8086/query'
                  - '        --data-urlencode ''q=CREATE DATABASE telegraf'''
                  - |+

                  - fi
                  - |+

    Properties:
      ImageId: !FindInMap 
        - AMIRegionMap
        - !Ref 'AWS::Region'
        - Meta
      InstanceType: !Ref MetaNodeInstanceType
      SecurityGroups:
        - !Ref SshSecurityGroup
        - !Ref InfluxDBInternalSecurityGroup
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref InfluxDBInstanceProfile
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - '#!/usr/bin/env bash'
            - |+

            - set -euxo pipefail
            - |+

            - yum update -y aws-cfn-bootstrap ec2-net-utils
            - |+

            - >-
              export INSTANCE_ID=$( curl -s
              http://169.254.169.254/latest/meta-data/instance-id )
            - |+

            - '/opt/aws/bin/cfn-init -v '
            - '        --stack '
            - !Ref 'AWS::StackName'
            - '        --region '
            - !Ref 'AWS::Region'
            - '        --resource MetaNodeLaunchConfiguration '
            - '        --configsets SetupNode'
            - |+

            - ASG_NAME=$( aws ec2 describe-tags
            - '        --filters "Name=resource-id,Values=$INSTANCE_ID"'
            - '        --query "Tags[?Key==''aws:cloudformation:logical-id''].Value"'
            - '        --output text )'
            - |+

            - |
              # Signal the status from cfn-init
            - '/opt/aws/bin/cfn-signal -e $? '
            - '        --stack '
            - !Ref 'AWS::StackName'
            - '        --region '
            - !Ref 'AWS::Region'
            - '        --resource $ASG_NAME'
            - |+

  MetaNodeEni00:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      Description: ENI for data node one ASG
      GroupSet:
        - !Ref InfluxDBInternalSecurityGroup
      SubnetId: !Ref SubnetId
  MetaNodeDns00:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      ResourceRecords:
        - !GetAtt 
          - MetaNodeEni00
          - PrimaryPrivateIpAddress
      HostedZoneId: !Ref InfluxDBPrivateHostedZone
      Name: meta-0.influxdb.internal
      Type: A
      TTL: '60'
  MetaNodeVolume00:
    Type: 'AWS::EC2::Volume'
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      Size: 25
      VolumeType: gp2
      AutoEnableIO: true
      Encrypted: true
    DeletionPolicy: Snapshot
  MetaNodeAutoScalingGroup00:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    DependsOn:
      - MetaNodeAutoScalingGroup01
      - MetaNodeAutoScalingGroup02
      - DataNodeAutoScalingGroup03
      - DataNodeAutoScalingGroup04
    Properties:
      AvailabilityZones:
        - !Ref AvailabilityZone
      VPCZoneIdentifier:
        - !Ref SubnetId
      LaunchConfigurationName: !Ref MetaNodeLaunchConfiguration
      DesiredCapacity: '1'
      MinSize: '0'
      MaxSize: '1'
      Tags:
        - Key: influxdb-eni
          Value: !Ref MetaNodeEni00
          PropagateAtLaunch: true
        - Key: influxdb-volume
          Value: !Ref MetaNodeVolume00
          PropagateAtLaunch: true
        - Key: influxdb-hostname
          Value: !Ref MetaNodeDns00
          PropagateAtLaunch: true
        - Key: Name
          Value: meta-0
          PropagateAtLaunch: true
        - Key: influxdb-leader
          Value: 'true'
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT60M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 0
        MaxBatchSize: 1
        PauseTime: PT10M
        WaitOnResourceSignals: true
  MetaNodeEni01:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      Description: ENI for data node one ASG
      GroupSet:
        - !Ref InfluxDBInternalSecurityGroup
      SubnetId: !Ref SubnetId
  MetaNodeDns01:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      ResourceRecords:
        - !GetAtt 
          - MetaNodeEni01
          - PrimaryPrivateIpAddress
      HostedZoneId: !Ref InfluxDBPrivateHostedZone
      Name: meta-1.influxdb.internal
      Type: A
      TTL: '60'
  MetaNodeVolume01:
    Type: 'AWS::EC2::Volume'
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      Size: 20
      VolumeType: gp2
      AutoEnableIO: true
      Encrypted: true
    DeletionPolicy: Snapshot
  MetaNodeAutoScalingGroup01:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AvailabilityZones:
        - !Ref AvailabilityZone
      VPCZoneIdentifier:
        - !Ref SubnetId
      LaunchConfigurationName: !Ref MetaNodeLaunchConfiguration
      DesiredCapacity: '1'
      MinSize: '0'
      MaxSize: '1'
      Tags:
        - Key: influxdb-eni
          Value: !Ref MetaNodeEni01
          PropagateAtLaunch: true
        - Key: influxdb-volume
          Value: !Ref MetaNodeVolume01
          PropagateAtLaunch: true
        - Key: influxdb-hostname
          Value: !Ref MetaNodeDns01
          PropagateAtLaunch: true
        - Key: Name
          Value: meta-1
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT60M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 0
        MaxBatchSize: 1
        PauseTime: PT10M
        WaitOnResourceSignals: true
  MetaNodeEni02:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      Description: ENI for data node one ASG
      GroupSet:
        - !Ref InfluxDBInternalSecurityGroup
      SubnetId: !Ref SubnetId
  MetaNodeDns02:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      ResourceRecords:
        - !GetAtt 
          - MetaNodeEni02
          - PrimaryPrivateIpAddress
      HostedZoneId: !Ref InfluxDBPrivateHostedZone
      Name: meta-2.influxdb.internal
      Type: A
      TTL: '60'
  MetaNodeVolume02:
    Type: 'AWS::EC2::Volume'
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      Size: 20
      VolumeType: gp2
      AutoEnableIO: true
      Encrypted: true
    DeletionPolicy: Snapshot
  MetaNodeAutoScalingGroup02:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AvailabilityZones:
        - !Ref AvailabilityZone
      VPCZoneIdentifier:
        - !Ref SubnetId
      LaunchConfigurationName: !Ref MetaNodeLaunchConfiguration
      DesiredCapacity: '1'
      MinSize: '0'
      MaxSize: '1'
      Tags:
        - Key: influxdb-eni
          Value: !Ref MetaNodeEni02
          PropagateAtLaunch: true
        - Key: influxdb-volume
          Value: !Ref MetaNodeVolume02
          PropagateAtLaunch: true
        - Key: influxdb-hostname
          Value: !Ref MetaNodeDns02
          PropagateAtLaunch: true
        - Key: Name
          Value: meta-2
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT60M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 0
        MaxBatchSize: 1
        PauseTime: PT10M
        WaitOnResourceSignals: true
  DataNodeLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          SetupNode:
            - SetAWSCLIRegion
            - SetLicense
            - SetHostnames
            - SetMonitor
            - AttachNetwork
            - AttachVolume
            - MountVolume
            - StartInfluxDB
            - StartTelegraf
        SetAWSCLIRegion:
          files:
            /root/.aws/config:
              content: !Sub |
                [default]
                region = ${AWS::Region}
              mode: '000644'
              owner: root
              group: root
        SetLicense:
          files:
            /etc/default/influxdb:
              content: INFLUXDB_ENTERPRISE_MARKETPLACE_ENV=aws
              mode: '000644'
              owner: root
              group: root
        SetHostnames:
          commands:
            01_set_instance_hostname:
              command: !Join 
                - ''
                - - set -x
                  - |+

                  - INFLUXDB_HOSTNAME=$( aws ec2 describe-tags
                  - '        --filters "Name=resource-id,Values=$INSTANCE_ID"'
                  - '        --query "Tags[?Key==''influxdb-hostname''].Value"'
                  - '        --output text )'
                  - |+

                  - >-
                    echo "INFLUXDB_HOSTNAME=$INFLUXDB_HOSTNAME" >>
                    /etc/default/influxdb
                  - |+

                  - >-
                    echo "INFLUXDB_HTTP_FLUX_ENABLED=true" >>
                    /etc/default/influxdb
                  - |+

        SetMonitor:
          files:
            /etc/default/telegraf:
              content: !Join 
                - ''
                - - MONITOR_HOSTNAME=
                  - !Ref MonitorDns
                  - |+

                  - MONITOR_USERNAME=
                  - !Ref Username
                  - |+

                  - MONITOR_PASSWORD=
                  - !Ref Password
                  - |+

              mode: '000644'
              owner: root
              group: root
        AttachNetwork:
          commands:
            01_attach_network:
              command: !Join 
                - ''
                - - set -x
                  - |+

                  - >-
                    # If network interface is not attached to this instance,
                    then attach it
                  - |+

                  - ENI_ID=$( aws ec2 describe-tags
                  - '        --filters "Name=resource-id,Values=$INSTANCE_ID"'
                  - '        --query "Tags[?Key==''influxdb-eni''].Value"'
                  - '        --output text )'
                  - |+

                  - STATUS=$( aws ec2 describe-network-interfaces
                  - '        --network-interface-ids $ENI_ID'
                  - '        --filters "Name=attachment.instance-id,Values=$INSTANCE_ID"'
                  - '        --query "NetworkInterfaces[0].Attachment.Status"'
                  - '        --output text )'
                  - |+

                  - '# TODO: switch to until ''attached'' loop'
                  - |+

                  - 'if ! [[ $STATUS =~ (attached|attaching) ]]; then'
                  - |+

                  - '# Wait until network interface is available'
                  - |+

                  - aws ec2 wait network-interface-available
                  - '        --network-interface-ids $ENI_ID'
                  - |+

                  - aws ec2 attach-network-interface
                  - '        --network-interface-id $ENI_ID'
                  - '        --instance-id $INSTANCE_ID'
                  - '        --device-index 1'
                  - |+

                  - >-
                    # Reload network to automatically enable eth1 via Amazon
                    Linux 2 ec2-net-utils
                  - |+

                  - systemctl restart network
                  - |+

                  - fi
                  - |+

        AttachVolume:
          commands:
            01_attach_volume:
              command: !Join 
                - ''
                - - set -x
                  - |+

                  - >-
                    # If EBS volume is not attached to this instance, then
                    attach it
                  - |+

                  - VOLUME_ID=$( aws ec2 describe-tags
                  - '        --filters "Name=resource-id,Values=$INSTANCE_ID"'
                  - '        --query "Tags[?Key==''influxdb-volume''].Value"'
                  - '        --output text )'
                  - |+

                  - STATUS=$( aws ec2 describe-volumes
                  - '        --volume-ids $VOLUME_ID'
                  - '        --filters "Name=attachment.instance-id,Values=$INSTANCE_ID"'
                  - '        --query "Volumes[0].Attachments[0].State"'
                  - '        --output text )'
                  - |+

                  - 'if ! [[ $STATUS =~ (attached|attaching) ]]; then'
                  - |+

                  - '# Wait until volume is available'
                  - |+

                  - aws ec2 wait volume-available
                  - '        --volume-ids $VOLUME_ID'
                  - |+

                  - aws ec2 attach-volume
                  - '        --volume-id $VOLUME_ID'
                  - '        --instance-id $INSTANCE_ID'
                  - '        --device /dev/xvdh'
                  - |+

                  - 'until [[ "$('
                  - aws ec2 describe-volume-status
                  - '        --volume-ids $VOLUME_ID'
                  - '        --query ''VolumeStatuses[0].VolumeStatus.Details[?Name==`io-enabled`].Status'''
                  - '        --output text'
                  - ')" == ''passed'' ]]; do sleep 5; done'
                  - |+

                  - fi
                  - |+

        MountVolume:
          commands:
            01_mount_volumes:
              command: !Join 
                - ''
                - - set -x
                  - |+

                  - /sbin/ebsnvme-id -b /dev/nvme1n1
                  - |+

                  - 'until [ -b $(readlink -f /dev/xvdh) ]; do sleep 1; done'
                  - |+

                  - 'if [[ "$(lsblk -no FSTYPE /dev/xvdh)" != "ext4" ]]; then'
                  - |+

                  - /usr/sbin/mkfs -t ext4 /dev/xvdh
                  - |+

                  - sleep 10
                  - |+

                  - fi
                  - |+

                  - mkdir -p /influxdb
                  - |+

                  - mount /dev/xvdh /influxdb
                  - |+

                  - /sbin/resize2fs /dev/xvdh
                  - |+

                  - mkdir -p /influxdb/meta /influxdb /influxdb/wal /influxdb/hh
                  - |+

                  - 'chown -R influxdb:influxdb /influxdb'
                  - |+

            02_set_fstab:
              command: !Join 
                - ''
                - - set -x
                  - |+

                  - DEVICE_UUID="$(blkid -s UUID -o value /dev/xvdh)"
                  - |+

                  - if grep -q "$DEVICE_UUID" /etc/fstab; then
                  - |+

                  - echo "fstab already set"
                  - |+

                  - else
                  - |+

                  - cp /etc/fstab /etc/fstab.original
                  - |+

                  - "echo -e \"UUID=$DEVICE_UUID\t/influxdb\text4\tdefaults,nofail\t0\t2\" >> /etc/fstab"
                  - |+

                  - fi
                  - |+

        StartInfluxDB:
          commands:
            01_enable_influxdb_service:
              command: systemctl enable influxdb
            02_start_influxdb_service:
              command: systemctl start influxdb
        StartTelegraf:
          commands:
            01_enable_telegraf_service:
              command: systemctl enable telegraf
            02_start_telegraf_service:
              command: systemctl start telegraf
    Properties:
      ImageId: !FindInMap 
        - AMIRegionMap
        - !Ref 'AWS::Region'
        - Data
      InstanceType: !Ref DataNodeInstanceType
      SecurityGroups:
        - !Ref SshSecurityGroup
        - !Ref InfluxDBInternalSecurityGroup
        - !Ref InfluxDBDataNodeSecurityGroup
      KeyName: !Ref KeyName
      EbsOptimized: true
      IamInstanceProfile: !Ref InfluxDBInstanceProfile
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - '#!/usr/bin/env bash'
            - |+

            - set -euxo pipefail
            - |+

            - yum update -y aws-cfn-bootstrap ec2-net-utils
            - |+

            - >-
              export INSTANCE_ID=$( curl -s
              http://169.254.169.254/latest/meta-data/instance-id )
            - |+

            - '/opt/aws/bin/cfn-init -v '
            - '        --stack '
            - !Ref 'AWS::StackName'
            - '        --region '
            - !Ref 'AWS::Region'
            - '        --resource DataNodeLaunchConfiguration '
            - '        --configsets SetupNode'
            - |+

            - ASG_NAME=$( aws ec2 describe-tags
            - '        --filters "Name=resource-id,Values=$INSTANCE_ID"'
            - '        --query "Tags[?Key==''aws:cloudformation:logical-id''].Value"'
            - '        --output text )'
            - |+

            - |
              # Signal the status from cfn-init
            - '/opt/aws/bin/cfn-signal -e $? '
            - '        --stack '
            - !Ref 'AWS::StackName'
            - '        --region '
            - !Ref 'AWS::Region'
            - '        --resource $ASG_NAME'
            - |+

  DataNodeEni03:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      Description: ENI for data node one ASG
      GroupSet:
        - !Ref InfluxDBInternalSecurityGroup
      SubnetId: !Ref SubnetId
  DataNodeDns03:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      ResourceRecords:
        - !GetAtt 
          - DataNodeEni03
          - PrimaryPrivateIpAddress
      HostedZoneId: !Ref InfluxDBPrivateHostedZone
      Name: data-3.influxdb.internal
      Type: A
      TTL: '60'
  DataNodeVolume03:
    Type: 'AWS::EC2::Volume'
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      Size: !Ref DataNodeDiskSize
      VolumeType: io1
      Iops: !Ref DataNodeDiskIops
      AutoEnableIO: true
      Encrypted: true
    DeletionPolicy: Snapshot
  DataNodeAutoScalingGroup03:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AvailabilityZones:
        - !Ref AvailabilityZone
      VPCZoneIdentifier:
        - !Ref SubnetId
      LaunchConfigurationName: !Ref DataNodeLaunchConfiguration
      DesiredCapacity: '1'
      MinSize: '0'
      MaxSize: '1'
      LoadBalancerNames:
        - !Ref InfluxDBLoadBalancer
      Tags:
        - Key: influxdb-eni
          Value: !Ref DataNodeEni03
          PropagateAtLaunch: true
        - Key: influxdb-volume
          Value: !Ref DataNodeVolume03
          PropagateAtLaunch: true
        - Key: influxdb-hostname
          Value: !Ref DataNodeDns03
          PropagateAtLaunch: true
        - Key: Name
          Value: data-3
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT60M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 0
        MaxBatchSize: 1
        PauseTime: PT10M
        WaitOnResourceSignals: true
  DataNodeEni04:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      Description: ENI for data node one ASG
      GroupSet:
        - !Ref InfluxDBInternalSecurityGroup
      SubnetId: !Ref SubnetId
  DataNodeDns04:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      ResourceRecords:
        - !GetAtt 
          - DataNodeEni04
          - PrimaryPrivateIpAddress
      HostedZoneId: !Ref InfluxDBPrivateHostedZone
      Name: data-4.influxdb.internal
      Type: A
      TTL: '60'
  DataNodeVolume04:
    Type: 'AWS::EC2::Volume'
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      Size: !Ref DataNodeDiskSize
      VolumeType: io1
      Iops: !Ref DataNodeDiskIops
      AutoEnableIO: true
      Encrypted: true
    DeletionPolicy: Snapshot
  DataNodeAutoScalingGroup04:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AvailabilityZones:
        - !Ref AvailabilityZone
      VPCZoneIdentifier:
        - !Ref SubnetId
      LaunchConfigurationName: !Ref DataNodeLaunchConfiguration
      DesiredCapacity: '1'
      MinSize: '0'
      MaxSize: '1'
      LoadBalancerNames:
        - !Ref InfluxDBLoadBalancer
      Tags:
        - Key: influxdb-eni
          Value: !Ref DataNodeEni04
          PropagateAtLaunch: true
        - Key: influxdb-volume
          Value: !Ref DataNodeVolume04
          PropagateAtLaunch: true
        - Key: influxdb-hostname
          Value: !Ref DataNodeDns04
          PropagateAtLaunch: true
        - Key: Name
          Value: data-4
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT60M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 0
        MaxBatchSize: 1
        PauseTime: PT10M
        WaitOnResourceSignals: true
  MonitorLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          SetupNode:
            - SetAWSCLIRegion
            - SetHostnames
            - SetMonitor
            - SetKapacitor
            - AttachNetwork
            - AttachVolume
            - MountVolume
            - StartInfluxDB
            - StartTelegraf
            - StartChronograf
            - StartKapacitor
            - ConfigureCluster
        SetAWSCLIRegion:
          files:
            /root/.aws/config:
              content: !Sub |
                [default]
                region = ${AWS::Region}
              mode: '000644'
              owner: root
              group: root
        SetHostnames:
          commands:
            01_set_instance_hostname:
              command: !Join 
                - ''
                - - set -x
                  - |+

                  - INFLUXDB_HOSTNAME=$( aws ec2 describe-tags
                  - '        --filters "Name=resource-id,Values=$INSTANCE_ID"'
                  - '        --query "Tags[?Key==''influxdb-hostname''].Value"'
                  - '        --output text )'
                  - |+

                  - >-
                    echo "INFLUXDB_HOSTNAME=$INFLUXDB_HOSTNAME" >>
                    /etc/default/influxdb
                  - |+

        SetMonitor:
          files:
            /etc/default/telegraf:
              content: !Join 
                - ''
                - - MONITOR_HOSTNAME=
                  - !Ref MonitorDns
                  - |+

                  - MONITOR_USERNAME=
                  - !Ref Username
                  - |+

                  - MONITOR_PASSWORD=
                  - !Ref Password
                  - |+

              mode: '000644'
              owner: root
              group: root
        SetKapacitor:
          files:
            /etc/default/kapacitor:
              content: !Join 
                - ''
                - - 'KAPACITOR_INFLUXDB_0_URLS_0=http://'
                  - !Ref MonitorDns
                  - |
                    :8086
                  - KAPACITOR_INFLUXDB_0_NAME=
                  - !Ref MonitorDns
                  - |+

                  - KAPACITOR_INFLUXDB_0_USERNAME=
                  - !Ref Username
                  - |+

                  - KAPACITOR_INFLUXDB_0_PASSWORD=
                  - !Ref Password
                  - |+

              mode: '000644'
              owner: root
              group: root
        AttachNetwork:
          commands:
            01_attach_network:
              command: !Join 
                - ''
                - - set -x
                  - |+

                  - >-
                    # If network interface is not attached to this instance,
                    then attach it
                  - |+

                  - ENI_ID=$( aws ec2 describe-tags
                  - '        --filters "Name=resource-id,Values=$INSTANCE_ID"'
                  - '        --query "Tags[?Key==''influxdb-eni''].Value"'
                  - '        --output text )'
                  - |+

                  - STATUS=$( aws ec2 describe-network-interfaces
                  - '        --network-interface-ids $ENI_ID'
                  - '        --filters "Name=attachment.instance-id,Values=$INSTANCE_ID"'
                  - '        --query "NetworkInterfaces[0].Attachment.Status"'
                  - '        --output text )'
                  - |+

                  - '# TODO: switch to until ''attached'' loop'
                  - |+

                  - 'if ! [[ $STATUS =~ (attached|attaching) ]]; then'
                  - |+

                  - '# Wait until network interface is available'
                  - |+

                  - aws ec2 wait network-interface-available
                  - '        --network-interface-ids $ENI_ID'
                  - |+

                  - aws ec2 attach-network-interface
                  - '        --network-interface-id $ENI_ID'
                  - '        --instance-id $INSTANCE_ID'
                  - '        --device-index 1'
                  - |+

                  - >-
                    # Reload network to automatically enable eth1 via Amazon
                    Linux 2 ec2-net-utils
                  - |+

                  - systemctl restart network
                  - |+

                  - fi
                  - |+

        AttachVolume:
          commands:
            01_attach_volume:
              command: !Join 
                - ''
                - - set -x
                  - |+

                  - >-
                    # If EBS volume is not attached to this instance, then
                    attach it
                  - |+

                  - VOLUME_ID=$( aws ec2 describe-tags
                  - '        --filters "Name=resource-id,Values=$INSTANCE_ID"'
                  - '        --query "Tags[?Key==''influxdb-volume''].Value"'
                  - '        --output text )'
                  - |+

                  - STATUS=$( aws ec2 describe-volumes
                  - '        --volume-ids $VOLUME_ID'
                  - '        --filters "Name=attachment.instance-id,Values=$INSTANCE_ID"'
                  - '        --query "Volumes[0].Attachments[0].State"'
                  - '        --output text )'
                  - |+

                  - 'if ! [[ $STATUS =~ (attached|attaching) ]]; then'
                  - |+

                  - '# Wait until volume is available'
                  - |+

                  - aws ec2 wait volume-available
                  - '        --volume-ids $VOLUME_ID'
                  - |+

                  - aws ec2 attach-volume
                  - '        --volume-id $VOLUME_ID'
                  - '        --instance-id $INSTANCE_ID'
                  - '        --device /dev/xvdh'
                  - |+

                  - 'until [[ "$('
                  - aws ec2 describe-volume-status
                  - '        --volume-ids $VOLUME_ID'
                  - '        --query ''VolumeStatuses[0].VolumeStatus.Details[?Name==`io-enabled`].Status'''
                  - '        --output text'
                  - ')" == ''passed'' ]]; do sleep 5; done'
                  - |+

                  - fi
                  - |+

        MountVolume:
          commands:
            01_mount_volumes:
              command: !Join 
                - ''
                - - set -x
                  - |+

                  - /sbin/ebsnvme-id -b /dev/nvme1n1
                  - |+

                  - 'until [ -b $(readlink -f /dev/xvdh) ]; do sleep 1; done'
                  - |+

                  - 'if [[ "$(lsblk -no FSTYPE /dev/xvdh)" != "ext4" ]]; then'
                  - |+

                  - /usr/sbin/mkfs -t ext4 /dev/xvdh
                  - |+

                  - sleep 10
                  - |+

                  - fi
                  - |+

                  - mkdir -p /influxdb
                  - |+

                  - mount /dev/xvdh /influxdb
                  - |+

                  - /sbin/resize2fs /dev/xvdh
                  - |+

                  - mkdir -p /influxdb/meta /influxdb /influxdb/wal /influxdb/hh
                  - |+

                  - 'chown -R influxdb:influxdb /influxdb'
                  - |+

                  - 'chown -R kapacitor:kapacitor /var/log/kapacitor'
                  - |+

                  - mkdir -p /influxdb/kapacitor
                  - |+

                  - 'chown -R kapacitor:kapacitor /influxdb/kapacitor'
                  - |+

            02_set_fstab:
              command: !Join 
                - ''
                - - set -x
                  - |+

                  - DEVICE_UUID="$(blkid -s UUID -o value /dev/xvdh)"
                  - |+

                  - if grep -q "$DEVICE_UUID" /etc/fstab; then
                  - |+

                  - echo "fstab already set"
                  - |+

                  - else
                  - |+

                  - cp /etc/fstab /etc/fstab.original
                  - |+

                  - "echo -e \"UUID=$DEVICE_UUID\t/influxdb\text4\tdefaults,nofail\t0\t2\" >> /etc/fstab"
                  - |+

                  - fi
                  - |+

        StartInfluxDB:
          commands:
            01_enable_influxdb_service:
              command: systemctl enable influxdb
            02_start_influxdb_service:
              command: systemctl start influxdb
        StartTelegraf:
          commands:
            01_enable_telegraf_service:
              command: systemctl enable telegraf
            02_start_telegraf_service:
              command: systemctl start telegraf
        StartChronograf:
          commands:
            01_enable_chronograf_service:
              command: systemctl enable chronograf
            02_start_chronograf_service:
              command: systemctl start chronograf
        StartKapacitor:
          commands:
            01_enable_kapacitor_service:
              command: systemctl enable kapacitor
            02_start_kapacitor_service:
              command: service kapacitor start
        ConfigureCluster:
          commands:
            01_create_influxdb_user:
              command: !Join 
                - ''
                - - set -x
                  - |+

                  - '# Wait until InfluxDB monitor is listening'
                  - |+

                  - 'while [[ "'
                  - >-
                    $(curl -s -o /dev/null -w ''%{http_code}''
                    monitor.influxdb.internal:8086/ping)
                  - '" != ''204'' ]]; do sleep 5; done'
                  - |+

                  - 'curl -u '
                  - !Ref Username
                  - ':'
                  - !Ref Password
                  - ' "http://'
                  - !Ref MonitorDns
                  - ':8086/query"'
                  - '        --data-urlencode "q='
                  - 'CREATE USER '
                  - !Ref Username
                  - ' WITH PASSWORD '''
                  - !Ref Password
                  - ''' WITH ALL PRIVILEGES'
                  - '"'
                  - |+

                  - 'curl -u '
                  - !Ref Username
                  - ':'
                  - !Ref Password
                  - ' http://'
                  - !Ref MonitorDns
                  - ':8086/query'
                  - '        --data-urlencode ''q=CREATE DATABASE telegraf WITH DURATION 30d SHARD DURATION 7d'''
                  - |+

    Properties:
      ImageId: !FindInMap 
        - AMIRegionMap
        - !Ref 'AWS::Region'
        - Monitor
      InstanceType: !Ref MonitorInstanceType
      SecurityGroups:
        - !Ref SshSecurityGroup
        - !Ref InfluxDBInternalSecurityGroup
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref InfluxDBInstanceProfile
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - '#!/usr/bin/env bash'
            - |+

            - set -euxo pipefail
            - |+

            - yum update -y aws-cfn-bootstrap ec2-net-utils
            - |+

            - >-
              export INSTANCE_ID=$( curl -s
              http://169.254.169.254/latest/meta-data/instance-id )
            - |+

            - '/opt/aws/bin/cfn-init -v '
            - '        --stack '
            - !Ref 'AWS::StackName'
            - '        --region '
            - !Ref 'AWS::Region'
            - '        --resource MonitorLaunchConfiguration '
            - '        --configsets SetupNode'
            - |+

            - ASG_NAME=$( aws ec2 describe-tags
            - '        --filters "Name=resource-id,Values=$INSTANCE_ID"'
            - '        --query "Tags[?Key==''aws:cloudformation:logical-id''].Value"'
            - '        --output text )'
            - |+

            - |
              # Signal the status from cfn-init
            - '/opt/aws/bin/cfn-signal -e $? '
            - '        --stack '
            - !Ref 'AWS::StackName'
            - '        --region '
            - !Ref 'AWS::Region'
            - '        --resource $ASG_NAME'
            - |+

  MonitorEni:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      Description: ENI for data node one ASG
      GroupSet:
        - !Ref InfluxDBInternalSecurityGroup
      SubnetId: !Ref SubnetId
  MonitorDns:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      ResourceRecords:
        - !GetAtt 
          - MonitorEni
          - PrimaryPrivateIpAddress
      HostedZoneId: !Ref InfluxDBPrivateHostedZone
      Name: monitor.influxdb.internal
      Type: A
      TTL: '60'
  MonitorVolume:
    Type: 'AWS::EC2::Volume'
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      Size: 100
      VolumeType: gp2
      AutoEnableIO: true
      Encrypted: true
    DeletionPolicy: Snapshot
  MonitorAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AvailabilityZones:
        - !Ref AvailabilityZone
      VPCZoneIdentifier:
        - !Ref SubnetId
      LaunchConfigurationName: !Ref MonitorLaunchConfiguration
      DesiredCapacity: '1'
      MinSize: '0'
      MaxSize: '1'
      Tags:
        - Key: influxdb-eni
          Value: !Ref MonitorEni
          PropagateAtLaunch: true
        - Key: influxdb-volume
          Value: !Ref MonitorVolume
          PropagateAtLaunch: true
        - Key: influxdb-hostname
          Value: !Ref MonitorDns
          PropagateAtLaunch: true
        - Key: Name
          Value: monitor
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT60M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 0
        MaxBatchSize: 1
        PauseTime: PT10M
        WaitOnResourceSignals: true
