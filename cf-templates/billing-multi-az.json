{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "InfluxDB Enterprise",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "VpcClassB",
                        "InfluxDBIngressCIDR",
                        "KeyName",
                        "SSHLocation"
                    ]
                },
                {
                    "Label": {
                        "default": "InfluxDB Configuration"
                    },
                    "Parameters": [
                        "Username",
                        "Password",
                        "DataNodeDiskSize",
                        "DataNodeDiskIops"
                    ]
                }
            ],
            "ParameterLabels": {
                "KeyName": {
                    "default": "SSH Key Name"
                },
                "InfluxDBIngressCIDR": {
                    "default": "InfluxDB ingress CIDR (Public IPv4 address range of InfluxDB users)"
                },
                "SSHLocation": {
                    "default": "SSH Access CIDR (Public IPv4 address range of the administrator's network)"
                },
                "Username": {
                    "default": "InfluxDB Administrator Username"
                },
                "Password": {
                    "default": "InfluxDB Administrator Password"
                },
                "DataNodeInstanceType": {
                    "default": "InfluxDB Data Node Instance Type"
                },
                "DataNodeDiskSize": {
                    "default": "InfluxDB Data Node Disk Size"
                },
                "DataNodeDiskIops": {
                    "default": "InfluxDB Data Node Disk IOPS"
                },
                "MetaNodeInstanceType": {
                    "default": "InfluxDB Meta Node Instance Type"
                },
                "MonitorInstanceType": {
                    "default": "InfluxDB Monitor Instance Type"
                }
            }
        }
    },
    "Parameters": {
        "VpcClassB": {
            "Type": "Number",
            "Description": "Class B of Virtual Private Cloud's (VPC) CIDR, e.g. 10.XXX.0.0/16",
            "Default": 0,
            "ConstraintDescription": "Allowed values are 0 through 255",
            "MinValue": 0,
            "MaxValue": 255
        },
        "Username": {
            "Description": "Username for the initial cluster administrator user",
            "Type": "String"
        },
        "Password": {
            "Description": "Password for cluster administrator user",
            "Type": "String",
            "NoEcho": true
        },
        "DataNodeInstanceType": {
            "Description": "Instance type for data nodes",
            "Type": "String",
            "Default": "m5.4xlarge",
            "AllowedValues": [
                "m5.4xlarge",
                "m4.4xlarge",
                "r5.4xlarge",
                "r4.4xlarge",
                "c5.4xlarge",
                "c4.4xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "DataNodeDiskSize": {
            "Description": "Size in GB of the EBS io1 volume on each data node",
            "Type": "Number",
            "Default": 250
        },
        "DataNodeDiskIops": {
            "Description": "IOPS of the EBS io1 volume on each data node",
            "Type": "Number",
            "Default": 1000
        },
        "MetaNodeInstanceType": {
            "Description": "Instance type for meta nodes",
            "Type": "String",
            "Default": "t3.small",
            "AllowedValues": [
                "t2.small",
                "t2.medium",
                "t2.large",
                "t3.small",
                "t3.medium",
                "t3.large"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "MonitorInstanceType": {
            "Description": "Instance type for monitoring node",
            "Type": "String",
            "Default": "t3.large",
            "AllowedValues": [
                "t2.small",
                "t2.medium",
                "t2.large",
                "t3.small",
                "t3.medium",
                "t3.large"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
        },
        "InfluxDBIngressCIDR": {
            "Description": "The IP address range that can be used to connect to the InfluxDB API endpoint",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "SSHLocation": {
            "Description": "The IP address range that can be used to SSH to the EC2 instances",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        }
    },
    "Outputs": {
        "InfluxDBAPIEndpoint": {
            "Description": "The ALB endpoint that can be used to access the InfluxDB API. Listens on port 8086.",
            "Value": {
                "Fn::GetAtt": [
                    "InfluxDBLoadBalancer",
                    "DNSName"
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Join": [
                        ":",
                        [
                            {
                                "Ref": "AWS::StackName"
                            },
                            "InfluxDBAPIEndpoint"
                        ]
                    ]
                }
            }
        }
    },
    "Mappings": {
        "AMIRegionMap": {
            "us-east-1": {
                "Data": "ami-0d3f58e3e7855f16e",
                "Meta": "ami-0f448b5585f5d030e",
                "Monitor": "ami-038cec5466942cdb7"
            },
            "us-east-2": {
                "Data": "ami-0a017c3c8e443f2eb",
                "Meta": "ami-04dad2911814a65f7",
                "Monitor": "ami-062cdd832f4757a5a"
            },
            "us-west-1": {
                "Data": "ami-03570462643319437",
                "Meta": "ami-095828139633357a3",
                "Monitor": "ami-02bd70ea5a50a4bf3"
            },
            "us-west-2": {
                "Data": "ami-08aeb7f951e94ec2a",
                "Meta": "ami-07d04e7216e1a6899",
                "Monitor": "ami-0e9355a51ab8b3b0f"
            },
            "ca-central-1": {
                "Data": "ami-0327c5dda489695f0",
                "Meta": "ami-01425ead9ff60c79e",
                "Monitor": "ami-0607954fac53e643b"
            },
            "eu-central-1": {
                "Data": "ami-0495b19fb39182fd8",
                "Meta": "ami-049be8041f728be05",
                "Monitor": "ami-0865959f37e8619d3"
            },
            "eu-west-1": {
                "Data": "ami-0e49b8b963096778d",
                "Meta": "ami-049c325022e67d107",
                "Monitor": "ami-08d9a7c8aecfa9dd2"
            },
            "eu-west-2": {
                "Data": "ami-01ba53edc2e3e8be7",
                "Meta": "ami-08ba07b13611bf699",
                "Monitor": "ami-01642712ead9a26da"
            },
            "ap-southeast-1": {
                "Data": "ami-0a25da4bc5d6713fe",
                "Meta": "ami-08d82f96a2787d85d",
                "Monitor": "ami-0a9d8b8cb91a67930"
            },
            "ap-southeast-2": {
                "Data": "ami-0c19991daca0de7f7",
                "Meta": "ami-0b2dcb3caa92252ca",
                "Monitor": "ami-093999ac1905e9cf3"
            },
            "ap-south-1": {
                "Data": "ami-0ae1e26dd0ef38fc4",
                "Meta": "ami-05b71f3dde9704b87",
                "Monitor": "ami-0dde3f175eeb08766"
            },
            "ap-northeast-1": {
                "Data": "ami-0b3fd8f643cd35322",
                "Meta": "ami-08c1f14b85790ea23",
                "Monitor": "ami-08de32bd6eedccd9b"
            },
            "ap-northeast-2": {
                "Data": "ami-017df3dcedf24d93b",
                "Meta": "ami-03ecc0c937752725c",
                "Monitor": "ami-04e8ebfe9f91ec30b"
            },
            "ap-east-1": {
                "Data": "ami-feed968f",
                "Meta": "ami-e3e89392",
                "Monitor": "ami-fbef948a"
            },
            "sa-east-1": {
                "Data": "ami-0e312ee88ea0e833e",
                "Meta": "ami-0b4a95cf5aecdf674",
                "Monitor": "ami-02317c51b705cc8dd"
            }
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Fn::Sub": "10.${VpcClassB}.0.0/16"
                },
                "EnableDnsSupport": true,
                "EnableDnsHostnames": true,
                "InstanceTenancy": "default"
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "VPCGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "RouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "Route": {
            "DependsOn": "VPCGatewayAttachment",
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "Subnet00": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::Sub": "10.${VpcClassB}.0.0/20"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "MapPublicIpOnLaunch": true
            }
        },
        "Subnet00RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "Subnet00"
                },
                "RouteTableId": {
                    "Ref": "RouteTable"
                }
            }
        },
        "Subnet01": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::Sub": "10.${VpcClassB}.16.0/20"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "MapPublicIpOnLaunch": true
            }
        },
        "Subnet01RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "Subnet01"
                },
                "RouteTableId": {
                    "Ref": "RouteTable"
                }
            }
        },
        "Subnet02": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Fn::Sub": "10.${VpcClassB}.32.0/20"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "2",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "MapPublicIpOnLaunch": true
            }
        },
        "Subnet02RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "Subnet02"
                },
                "RouteTableId": {
                    "Ref": "RouteTable"
                }
            }
        },
        "InfluxDBPrivateHostedZone": {
            "Type": "AWS::Route53::HostedZone",
            "Properties": {
                "Name": "internal",
                "VPCs": [
                    {
                        "VPCId": {
                            "Ref": "VPC"
                        },
                        "VPCRegion": {
                            "Ref": "AWS::Region"
                        }
                    }
                ]
            }
        },
        "InfluxDBLoadBalancerRecordSet": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "AliasTarget": {
                    "DNSName": {
                        "Fn::GetAtt": [
                            "InfluxDBLoadBalancer",
                            "DNSName"
                        ]
                    },
                    "HostedZoneId": {
                        "Fn::GetAtt": [
                            "InfluxDBLoadBalancer",
                            "CanonicalHostedZoneID"
                        ]
                    }
                },
                "HostedZoneId": {
                    "Ref": "InfluxDBPrivateHostedZone"
                },
                "Name": "influxdb.internal",
                "Type": "A"
            }
        },
        "InfluxDBLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "SecurityGroups": [
                    {
                        "Ref": "InfluxDBALBSecurityGroup"
                    }
                ],
                "Subnets": [
                    {
                        "Ref": "Subnet00"
                    },
                    {
                        "Ref": "Subnet01"
                    },
                    {
                        "Ref": "Subnet02"
                    }
                ]
            }
        },
        "InfluxDBLoadBalancerListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "InfluxDBLoadBalancerTargetGroup"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "InfluxDBLoadBalancer"
                },
                "Port": 8086,
                "Protocol": "HTTP"
            }
        },
        "InfluxDBLoadBalancerTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "HealthCheckIntervalSeconds": 30,
                "HealthCheckPath": "/ping",
                "HealthCheckPort": "8086",
                "HealthCheckProtocol": "HTTP",
                "HealthCheckTimeoutSeconds": 10,
                "HealthyThresholdCount": 2,
                "Matcher": {
                    "HttpCode": "204"
                },
                "Port": 8086,
                "Protocol": "HTTP",
                "UnhealthyThresholdCount": 2,
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "InfluxDBInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [
                    {
                        "Ref": "InfluxDBRole"
                    }
                ]
            }
        },
        "InfluxDBRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "InfluxDBPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:AttachNetworkInterface",
                                        "ec2:AttachVolume",
                                        "ec2:DescribeVolumes",
                                        "ec2:DescribeVolumeStatus",
                                        "ec2:DescribeInstances",
                                        "ec2:DescribeNetworkInterfaces",
                                        "ec2:DescribeTags",
                                        "autoscaling:DescribeAutoScalingGroups"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "SshSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow external SSH traffic from SSHLocation",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "InfluxDBALBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow traffic from public internet to go to port 8086 on InfluxDB data nodes",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "InfluxDBALBSGIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "InfluxDBALBSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": 8086,
                "ToPort": 8086,
                "CidrIp": {
                    "Ref": "InfluxDBIngressCIDR"
                }
            }
        },
        "InfluxDBALBSGEgress": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "InfluxDBALBSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": 8086,
                "ToPort": 8086,
                "DestinationSecurityGroupId": {
                    "Ref": "InfluxDBDataNodeSecurityGroup"
                }
            }
        },
        "InfluxDBDataNodeSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow traffic from ALB to go to port 8086 on InfluxDB data nodes",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "InfluxDBDataNodeSGIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "InfluxDBDataNodeSecurityGroup"
                },
                "IpProtocol": "tcp",
                "FromPort": 8086,
                "ToPort": 8086,
                "SourceSecurityGroupId": {
                    "Ref": "InfluxDBALBSecurityGroup"
                }
            }
        },
        "InfluxDBInternalSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow all traffic between InfluxDB instances",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "InfluxDBInternalSGIngress": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "InfluxDBInternalSecurityGroup"
                },
                "IpProtocol": "-1",
                "SourceSecurityGroupId": {
                    "Ref": "InfluxDBInternalSecurityGroup"
                }
            }
        },
        "InfluxDBInternalSGEgress": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "InfluxDBInternalSecurityGroup"
                },
                "IpProtocol": "-1",
                "DestinationSecurityGroupId": {
                    "Ref": "InfluxDBInternalSecurityGroup"
                }
            }
        },
        "MetaNodeLaunchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "SetupNode": [
                            "SetAWSCLIRegion",
                            "SetLicense",
                            "SetHostnames",
                            "SetMonitor",
                            "AttachNetwork",
                            "AttachVolume",
                            "MountVolume",
                            "StartInfluxDB",
                            "StartTelegraf",
                            "ConfigureCluster"
                        ]
                    },
                    "SetAWSCLIRegion": {
                        "files": {
                            "/root/.aws/config": {
                                "content": {
                                    "Fn::Sub": "[default]\nregion = ${AWS::Region}\n"
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    },
                    "SetLicense": {
                        "files": {
                            "/etc/default/influxdb-meta": {
                                "content": "INFLUXDB_ENTERPRISE_MARKETPLACE_ENV=aws",
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    },
                    "SetHostnames": {
                        "commands": {
                            "01_set_instance_hostname": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "set -x",
                                            "\n",
                                            "INFLUXDB_HOSTNAME=$( aws ec2 describe-tags",
                                            "        --filters \"Name=resource-id,Values=$INSTANCE_ID\"",
                                            "        --query \"Tags[?Key=='influxdb-hostname'].Value\"",
                                            "        --output text )",
                                            "\n",
                                            "echo \"INFLUXDB_HOSTNAME=$INFLUXDB_HOSTNAME\" >> /etc/default/influxdb-meta",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "SetMonitor": {
                        "files": {
                            "/etc/default/telegraf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "MONITOR_HOSTNAME=",
                                            {
                                                "Ref": "MonitorDns"
                                            },
                                            "\n",
                                            "MONITOR_USERNAME=",
                                            {
                                                "Ref": "Username"
                                            },
                                            "\n",
                                            "MONITOR_PASSWORD=",
                                            {
                                                "Ref": "Password"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    },
                    "AttachNetwork": {
                        "commands": {
                            "01_attach_network": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "set -x",
                                            "\n",
                                            "# If network interface is not attached to this instance, then attach it",
                                            "\n",
                                            "ENI_ID=$( aws ec2 describe-tags",
                                            "        --filters \"Name=resource-id,Values=$INSTANCE_ID\"",
                                            "        --query \"Tags[?Key=='influxdb-eni'].Value\"",
                                            "        --output text )",
                                            "\n",
                                            "STATUS=$( aws ec2 describe-network-interfaces",
                                            "        --network-interface-ids $ENI_ID",
                                            "        --filters \"Name=attachment.instance-id,Values=$INSTANCE_ID\"",
                                            "        --query \"NetworkInterfaces[0].Attachment.Status\"",
                                            "        --output text )",
                                            "\n",
                                            "# TODO: switch to until 'attached' loop",
                                            "\n",
                                            "if ! [[ $STATUS =~ (attached|attaching) ]]; then",
                                            "\n",
                                            "# Wait until network interface is available",
                                            "\n",
                                            "aws ec2 wait network-interface-available",
                                            "        --network-interface-ids $ENI_ID",
                                            "\n",
                                            "aws ec2 attach-network-interface",
                                            "        --network-interface-id $ENI_ID",
                                            "        --instance-id $INSTANCE_ID",
                                            "        --device-index 1",
                                            "\n",
                                            "# Reload network to automatically enable eth1 via Amazon Linux 2 ec2-net-utils",
                                            "\n",
                                            "systemctl restart network",
                                            "\n",
                                            "fi",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "AttachVolume": {
                        "commands": {
                            "01_attach_volume": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "set -x",
                                            "\n",
                                            "# If EBS volume is not attached to this instance, then attach it",
                                            "\n",
                                            "VOLUME_ID=$( aws ec2 describe-tags",
                                            "        --filters \"Name=resource-id,Values=$INSTANCE_ID\"",
                                            "        --query \"Tags[?Key=='influxdb-volume'].Value\"",
                                            "        --output text )",
                                            "\n",
                                            "STATUS=$( aws ec2 describe-volumes",
                                            "        --volume-ids $VOLUME_ID",
                                            "        --filters \"Name=attachment.instance-id,Values=$INSTANCE_ID\"",
                                            "        --query \"Volumes[0].Attachments[0].State\"",
                                            "        --output text )",
                                            "\n",
                                            "if ! [[ $STATUS =~ (attached|attaching) ]]; then",
                                            "\n",
                                            "# Wait until volume is available",
                                            "\n",
                                            "aws ec2 wait volume-available",
                                            "        --volume-ids $VOLUME_ID",
                                            "\n",
                                            "aws ec2 attach-volume",
                                            "        --volume-id $VOLUME_ID",
                                            "        --instance-id $INSTANCE_ID",
                                            "        --device /dev/xvdh",
                                            "\n",
                                            "until [[ \"$(",
                                            "aws ec2 describe-volume-status",
                                            "        --volume-ids $VOLUME_ID",
                                            "        --query 'VolumeStatuses[0].VolumeStatus.Details[?Name==`io-enabled`].Status'",
                                            "        --output text",
                                            ")\" == 'passed' ]]; do sleep 5; done",
                                            "\n",
                                            "fi",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "MountVolume": {
                        "commands": {
                            "01_mount_volumes": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "set -x",
                                            "\n",
                                            "/sbin/ebsnvme-id -b /dev/nvme1n1",
                                            "\n",
                                            "until [ -b $(readlink -f /dev/xvdh) ]; do sleep 1; done",
                                            "\n",
                                            "if [[ \"$(lsblk -no FSTYPE /dev/xvdh)\" != \"ext4\" ]]; then",
                                            "\n",
                                            "/usr/sbin/mkfs -t ext4 /dev/xvdh",
                                            "\n",
                                            "sleep 10",
                                            "\n",
                                            "fi",
                                            "\n",
                                            "mkdir -p /influxdb",
                                            "\n",
                                            "mount /dev/xvdh /influxdb",
                                            "\n",
                                            "/sbin/resize2fs /dev/xvdh",
                                            "\n",
                                            "mkdir -p /influxdb/meta /influxdb /influxdb/wal /influxdb/hh",
                                            "\n",
                                            "chown -R influxdb:influxdb /influxdb",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "02_set_fstab": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "set -x",
                                            "\n",
                                            "DEVICE_UUID=\"$(blkid -s UUID -o value /dev/xvdh)\"",
                                            "\n",
                                            "if grep -q \"$DEVICE_UUID\" /etc/fstab; then",
                                            "\n",
                                            "echo \"fstab already set\"",
                                            "\n",
                                            "else",
                                            "\n",
                                            "cp /etc/fstab /etc/fstab.original",
                                            "\n",
                                            "echo -e \"UUID=$DEVICE_UUID\t/influxdb\text4\tdefaults,nofail\t0\t2\" >> /etc/fstab",
                                            "\n",
                                            "fi",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "StartInfluxDB": {
                        "commands": {
                            "01_enable_influxdb_service": {
                                "command": "systemctl enable influxdb-meta"
                            },
                            "02_start_influxdb_service": {
                                "command": "systemctl start influxdb-meta"
                            }
                        }
                    },
                    "StartTelegraf": {
                        "commands": {
                            "01_enable_telegraf_service": {
                                "command": "systemctl enable telegraf"
                            },
                            "02_start_telegraf_service": {
                                "command": "systemctl start telegraf"
                            }
                        }
                    },
                    "ConfigureCluster": {
                        "commands": {
                            "01_join_nodes": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "set -x",
                                            "\n",
                                            "LEADER=$( aws ec2 describe-tags",
                                            "        --filters \"Name=resource-id,Values=$INSTANCE_ID\"",
                                            "        --query \"Tags[?Key=='influxdb-leader'].Value\"",
                                            "        --output text )",
                                            "\n",
                                            "if [[ $LEADER == 'true' ]]; then",
                                            "\n",
                                            "while [[ \"$(curl -s -o /dev/null -w ''%{http_code}'' ",
                                            {
                                                "Ref": "MetaNodeDns00"
                                            },
                                            ":8091/status)\" != '200' ]]; do sleep 5; done",
                                            "\n",
                                            "influxd-ctl add-meta ",
                                            {
                                                "Ref": "MetaNodeDns00"
                                            },
                                            ":8091",
                                            "\n",
                                            "influxd-ctl add-meta ",
                                            {
                                                "Ref": "MetaNodeDns01"
                                            },
                                            ":8091",
                                            "\n",
                                            "influxd-ctl add-meta ",
                                            {
                                                "Ref": "MetaNodeDns02"
                                            },
                                            ":8091",
                                            "\n",
                                            "influxd-ctl add-data ",
                                            {
                                                "Ref": "DataNodeDns03"
                                            },
                                            ":8088",
                                            "\n",
                                            "influxd-ctl add-data ",
                                            {
                                                "Ref": "DataNodeDns04"
                                            },
                                            ":8088",
                                            "\n",
                                            "curl -u ",
                                            {
                                                "Ref": "Username"
                                            },
                                            ":",
                                            {
                                                "Ref": "Password"
                                            },
                                            " \"http://",
                                            {
                                                "Ref": "DataNodeDns03"
                                            },
                                            ":8086/query\"",
                                            "        --data-urlencode \"q=",
                                            "CREATE USER ",
                                            {
                                                "Ref": "Username"
                                            },
                                            " WITH PASSWORD '",
                                            {
                                                "Ref": "Password"
                                            },
                                            "' WITH ALL PRIVILEGES",
                                            "\"",
                                            "\n",
                                            "curl -u ",
                                            {
                                                "Ref": "Username"
                                            },
                                            ":",
                                            {
                                                "Ref": "Password"
                                            },
                                            " http://",
                                            {
                                                "Ref": "DataNodeDns03"
                                            },
                                            ":8086/query",
                                            "        --data-urlencode 'q=CREATE DATABASE telegraf'",
                                            "\n",
                                            "fi",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "Meta"
                    ]
                },
                "InstanceType": {
                    "Ref": "MetaNodeInstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "SshSecurityGroup"
                    },
                    {
                        "Ref": "InfluxDBInternalSecurityGroup"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "IamInstanceProfile": {
                    "Ref": "InfluxDBInstanceProfile"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/usr/bin/env bash",
                                "\n",
                                "set -euxo pipefail",
                                "\n",
                                "yum update -y aws-cfn-bootstrap ec2-net-utils",
                                "\n",
                                "export INSTANCE_ID=$( curl -s http://169.254.169.254/latest/meta-data/instance-id )",
                                "\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "        --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "        --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "        --resource MetaNodeLaunchConfiguration ",
                                "        --configsets SetupNode",
                                "\n",
                                "ASG_NAME=$( aws ec2 describe-tags",
                                "        --filters \"Name=resource-id,Values=$INSTANCE_ID\"",
                                "        --query \"Tags[?Key=='aws:cloudformation:logical-id'].Value\"",
                                "        --output text )",
                                "\n",
                                "# Signal the status from cfn-init\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "        --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "        --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "        --resource $ASG_NAME",
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "MetaNodeEni00": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "ENI for data node one ASG",
                "GroupSet": [
                    {
                        "Ref": "InfluxDBInternalSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Ref": "Subnet00"
                }
            }
        },
        "MetaNodeDns00": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "MetaNodeEni00",
                            "PrimaryPrivateIpAddress"
                        ]
                    }
                ],
                "HostedZoneId": {
                    "Ref": "InfluxDBPrivateHostedZone"
                },
                "Name": "meta-0.influxdb.internal",
                "Type": "A",
                "TTL": "60"
            }
        },
        "MetaNodeVolume00": {
            "Type": "AWS::EC2::Volume",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::GetAtt": [
                        "Subnet00",
                        "AvailabilityZone"
                    ]
                },
                "Size": 25,
                "VolumeType": "gp2",
                "AutoEnableIO": true,
                "Encrypted": true
            },
            "DeletionPolicy": "Snapshot"
        },
        "MetaNodeAutoScalingGroup00": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn": [
                "MetaNodeAutoScalingGroup01",
                "MetaNodeAutoScalingGroup02",
                "DataNodeAutoScalingGroup03",
                "DataNodeAutoScalingGroup04"
            ],
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Ref": "Subnet00"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "MetaNodeLaunchConfiguration"
                },
                "DesiredCapacity": "1",
                "MinSize": "0",
                "MaxSize": "1",
                "Tags": [
                    {
                        "Key": "influxdb-eni",
                        "Value": {
                            "Ref": "MetaNodeEni00"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "influxdb-volume",
                        "Value": {
                            "Ref": "MetaNodeVolume00"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "influxdb-hostname",
                        "Value": {
                            "Ref": "MetaNodeDns00"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "Name",
                        "Value": "meta-0",
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "influxdb-leader",
                        "Value": "true",
                        "PropagateAtLaunch": true
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": "1",
                    "Timeout": "PT60M"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": 0,
                    "MaxBatchSize": 1,
                    "PauseTime": "PT10M",
                    "WaitOnResourceSignals": true
                }
            }
        },
        "MetaNodeEni01": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "ENI for data node one ASG",
                "GroupSet": [
                    {
                        "Ref": "InfluxDBInternalSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Ref": "Subnet01"
                }
            }
        },
        "MetaNodeDns01": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "MetaNodeEni01",
                            "PrimaryPrivateIpAddress"
                        ]
                    }
                ],
                "HostedZoneId": {
                    "Ref": "InfluxDBPrivateHostedZone"
                },
                "Name": "meta-1.influxdb.internal",
                "Type": "A",
                "TTL": "60"
            }
        },
        "MetaNodeVolume01": {
            "Type": "AWS::EC2::Volume",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::GetAtt": [
                        "Subnet01",
                        "AvailabilityZone"
                    ]
                },
                "Size": 20,
                "VolumeType": "gp2",
                "AutoEnableIO": true,
                "Encrypted": true
            },
            "DeletionPolicy": "Snapshot"
        },
        "MetaNodeAutoScalingGroup01": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Ref": "Subnet01"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "MetaNodeLaunchConfiguration"
                },
                "DesiredCapacity": "1",
                "MinSize": "0",
                "MaxSize": "1",
                "Tags": [
                    {
                        "Key": "influxdb-eni",
                        "Value": {
                            "Ref": "MetaNodeEni01"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "influxdb-volume",
                        "Value": {
                            "Ref": "MetaNodeVolume01"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "influxdb-hostname",
                        "Value": {
                            "Ref": "MetaNodeDns01"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "Name",
                        "Value": "meta-1",
                        "PropagateAtLaunch": true
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": "1",
                    "Timeout": "PT60M"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": 0,
                    "MaxBatchSize": 1,
                    "PauseTime": "PT10M",
                    "WaitOnResourceSignals": true
                }
            }
        },
        "MetaNodeEni02": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "ENI for data node one ASG",
                "GroupSet": [
                    {
                        "Ref": "InfluxDBInternalSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Ref": "Subnet02"
                }
            }
        },
        "MetaNodeDns02": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "MetaNodeEni02",
                            "PrimaryPrivateIpAddress"
                        ]
                    }
                ],
                "HostedZoneId": {
                    "Ref": "InfluxDBPrivateHostedZone"
                },
                "Name": "meta-2.influxdb.internal",
                "Type": "A",
                "TTL": "60"
            }
        },
        "MetaNodeVolume02": {
            "Type": "AWS::EC2::Volume",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::GetAtt": [
                        "Subnet02",
                        "AvailabilityZone"
                    ]
                },
                "Size": 20,
                "VolumeType": "gp2",
                "AutoEnableIO": true,
                "Encrypted": true
            },
            "DeletionPolicy": "Snapshot"
        },
        "MetaNodeAutoScalingGroup02": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Ref": "Subnet02"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "MetaNodeLaunchConfiguration"
                },
                "DesiredCapacity": "1",
                "MinSize": "0",
                "MaxSize": "1",
                "Tags": [
                    {
                        "Key": "influxdb-eni",
                        "Value": {
                            "Ref": "MetaNodeEni02"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "influxdb-volume",
                        "Value": {
                            "Ref": "MetaNodeVolume02"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "influxdb-hostname",
                        "Value": {
                            "Ref": "MetaNodeDns02"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "Name",
                        "Value": "meta-2",
                        "PropagateAtLaunch": true
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": "1",
                    "Timeout": "PT60M"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": 0,
                    "MaxBatchSize": 1,
                    "PauseTime": "PT10M",
                    "WaitOnResourceSignals": true
                }
            }
        },
        "DataNodeLaunchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "SetupNode": [
                            "SetAWSCLIRegion",
                            "SetLicense",
                            "SetHostnames",
                            "SetMonitor",
                            "AttachNetwork",
                            "AttachVolume",
                            "MountVolume",
                            "StartInfluxDB",
                            "StartTelegraf"
                        ]
                    },
                    "SetAWSCLIRegion": {
                        "files": {
                            "/root/.aws/config": {
                                "content": {
                                    "Fn::Sub": "[default]\nregion = ${AWS::Region}\n"
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    },
                    "SetLicense": {
                        "files": {
                            "/etc/default/influxdb-meta": {
                                "content": "INFLUXDB_ENTERPRISE_MARKETPLACE_ENV=aws",
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    },
                    "SetHostnames": {
                        "commands": {
                            "01_set_instance_hostname": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "set -x",
                                            "\n",
                                            "INFLUXDB_HOSTNAME=$( aws ec2 describe-tags",
                                            "        --filters \"Name=resource-id,Values=$INSTANCE_ID\"",
                                            "        --query \"Tags[?Key=='influxdb-hostname'].Value\"",
                                            "        --output text )",
                                            "\n",
                                            "echo \"INFLUXDB_HOSTNAME=$INFLUXDB_HOSTNAME\" >> /etc/default/influxdb",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "SetMonitor": {
                        "files": {
                            "/etc/default/telegraf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "MONITOR_HOSTNAME=",
                                            {
                                                "Ref": "MonitorDns"
                                            },
                                            "\n",
                                            "MONITOR_USERNAME=",
                                            {
                                                "Ref": "Username"
                                            },
                                            "\n",
                                            "MONITOR_PASSWORD=",
                                            {
                                                "Ref": "Password"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    },
                    "AttachNetwork": {
                        "commands": {
                            "01_attach_network": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "set -x",
                                            "\n",
                                            "# If network interface is not attached to this instance, then attach it",
                                            "\n",
                                            "ENI_ID=$( aws ec2 describe-tags",
                                            "        --filters \"Name=resource-id,Values=$INSTANCE_ID\"",
                                            "        --query \"Tags[?Key=='influxdb-eni'].Value\"",
                                            "        --output text )",
                                            "\n",
                                            "STATUS=$( aws ec2 describe-network-interfaces",
                                            "        --network-interface-ids $ENI_ID",
                                            "        --filters \"Name=attachment.instance-id,Values=$INSTANCE_ID\"",
                                            "        --query \"NetworkInterfaces[0].Attachment.Status\"",
                                            "        --output text )",
                                            "\n",
                                            "# TODO: switch to until 'attached' loop",
                                            "\n",
                                            "if ! [[ $STATUS =~ (attached|attaching) ]]; then",
                                            "\n",
                                            "# Wait until network interface is available",
                                            "\n",
                                            "aws ec2 wait network-interface-available",
                                            "        --network-interface-ids $ENI_ID",
                                            "\n",
                                            "aws ec2 attach-network-interface",
                                            "        --network-interface-id $ENI_ID",
                                            "        --instance-id $INSTANCE_ID",
                                            "        --device-index 1",
                                            "\n",
                                            "# Reload network to automatically enable eth1 via Amazon Linux 2 ec2-net-utils",
                                            "\n",
                                            "systemctl restart network",
                                            "\n",
                                            "fi",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "AttachVolume": {
                        "commands": {
                            "01_attach_volume": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "set -x",
                                            "\n",
                                            "# If EBS volume is not attached to this instance, then attach it",
                                            "\n",
                                            "VOLUME_ID=$( aws ec2 describe-tags",
                                            "        --filters \"Name=resource-id,Values=$INSTANCE_ID\"",
                                            "        --query \"Tags[?Key=='influxdb-volume'].Value\"",
                                            "        --output text )",
                                            "\n",
                                            "STATUS=$( aws ec2 describe-volumes",
                                            "        --volume-ids $VOLUME_ID",
                                            "        --filters \"Name=attachment.instance-id,Values=$INSTANCE_ID\"",
                                            "        --query \"Volumes[0].Attachments[0].State\"",
                                            "        --output text )",
                                            "\n",
                                            "if ! [[ $STATUS =~ (attached|attaching) ]]; then",
                                            "\n",
                                            "# Wait until volume is available",
                                            "\n",
                                            "aws ec2 wait volume-available",
                                            "        --volume-ids $VOLUME_ID",
                                            "\n",
                                            "aws ec2 attach-volume",
                                            "        --volume-id $VOLUME_ID",
                                            "        --instance-id $INSTANCE_ID",
                                            "        --device /dev/xvdh",
                                            "\n",
                                            "until [[ \"$(",
                                            "aws ec2 describe-volume-status",
                                            "        --volume-ids $VOLUME_ID",
                                            "        --query 'VolumeStatuses[0].VolumeStatus.Details[?Name==`io-enabled`].Status'",
                                            "        --output text",
                                            ")\" == 'passed' ]]; do sleep 5; done",
                                            "\n",
                                            "fi",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "MountVolume": {
                        "commands": {
                            "01_mount_volumes": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "set -x",
                                            "\n",
                                            "/sbin/ebsnvme-id -b /dev/nvme1n1",
                                            "\n",
                                            "until [ -b $(readlink -f /dev/xvdh) ]; do sleep 1; done",
                                            "\n",
                                            "if [[ \"$(lsblk -no FSTYPE /dev/xvdh)\" != \"ext4\" ]]; then",
                                            "\n",
                                            "/usr/sbin/mkfs -t ext4 /dev/xvdh",
                                            "\n",
                                            "sleep 10",
                                            "\n",
                                            "fi",
                                            "\n",
                                            "mkdir -p /influxdb",
                                            "\n",
                                            "mount /dev/xvdh /influxdb",
                                            "\n",
                                            "/sbin/resize2fs /dev/xvdh",
                                            "\n",
                                            "mkdir -p /influxdb/meta /influxdb /influxdb/wal /influxdb/hh",
                                            "\n",
                                            "chown -R influxdb:influxdb /influxdb",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "02_set_fstab": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "set -x",
                                            "\n",
                                            "DEVICE_UUID=\"$(blkid -s UUID -o value /dev/xvdh)\"",
                                            "\n",
                                            "if grep -q \"$DEVICE_UUID\" /etc/fstab; then",
                                            "\n",
                                            "echo \"fstab already set\"",
                                            "\n",
                                            "else",
                                            "\n",
                                            "cp /etc/fstab /etc/fstab.original",
                                            "\n",
                                            "echo -e \"UUID=$DEVICE_UUID\t/influxdb\text4\tdefaults,nofail\t0\t2\" >> /etc/fstab",
                                            "\n",
                                            "fi",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "StartInfluxDB": {
                        "commands": {
                            "01_enable_influxdb_service": {
                                "command": "systemctl enable influxdb"
                            },
                            "02_start_influxdb_service": {
                                "command": "systemctl start influxdb"
                            }
                        }
                    },
                    "StartTelegraf": {
                        "commands": {
                            "01_enable_telegraf_service": {
                                "command": "systemctl enable telegraf"
                            },
                            "02_start_telegraf_service": {
                                "command": "systemctl start telegraf"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "Data"
                    ]
                },
                "InstanceType": {
                    "Ref": "DataNodeInstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "SshSecurityGroup"
                    },
                    {
                        "Ref": "InfluxDBInternalSecurityGroup"
                    },
                    {
                        "Ref": "InfluxDBDataNodeSecurityGroup"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "EbsOptimized": true,
                "IamInstanceProfile": {
                    "Ref": "InfluxDBInstanceProfile"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/usr/bin/env bash",
                                "\n",
                                "set -euxo pipefail",
                                "\n",
                                "yum update -y aws-cfn-bootstrap ec2-net-utils",
                                "\n",
                                "export INSTANCE_ID=$( curl -s http://169.254.169.254/latest/meta-data/instance-id )",
                                "\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "        --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "        --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "        --resource DataNodeLaunchConfiguration ",
                                "        --configsets SetupNode",
                                "\n",
                                "ASG_NAME=$( aws ec2 describe-tags",
                                "        --filters \"Name=resource-id,Values=$INSTANCE_ID\"",
                                "        --query \"Tags[?Key=='aws:cloudformation:logical-id'].Value\"",
                                "        --output text )",
                                "\n",
                                "# Signal the status from cfn-init\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "        --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "        --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "        --resource $ASG_NAME",
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "DataNodeEni03": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "ENI for data node one ASG",
                "GroupSet": [
                    {
                        "Ref": "InfluxDBInternalSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Ref": "Subnet00"
                }
            }
        },
        "DataNodeDns03": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "DataNodeEni03",
                            "PrimaryPrivateIpAddress"
                        ]
                    }
                ],
                "HostedZoneId": {
                    "Ref": "InfluxDBPrivateHostedZone"
                },
                "Name": "data-3.influxdb.internal",
                "Type": "A",
                "TTL": "60"
            }
        },
        "DataNodeVolume03": {
            "Type": "AWS::EC2::Volume",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::GetAtt": [
                        "Subnet00",
                        "AvailabilityZone"
                    ]
                },
                "Size": {
                    "Ref": "DataNodeDiskSize"
                },
                "VolumeType": "io1",
                "Iops": {
                    "Ref": "DataNodeDiskIops"
                },
                "AutoEnableIO": true,
                "Encrypted": true
            },
            "DeletionPolicy": "Snapshot"
        },
        "DataNodeAutoScalingGroup03": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Ref": "Subnet00"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "DataNodeLaunchConfiguration"
                },
                "DesiredCapacity": "1",
                "MinSize": "0",
                "MaxSize": "1",
                "TargetGroupARNs": [
                    {
                        "Ref": "InfluxDBLoadBalancerTargetGroup"
                    }
                ],
                "Tags": [
                    {
                        "Key": "influxdb-eni",
                        "Value": {
                            "Ref": "DataNodeEni03"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "influxdb-volume",
                        "Value": {
                            "Ref": "DataNodeVolume03"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "influxdb-hostname",
                        "Value": {
                            "Ref": "DataNodeDns03"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "Name",
                        "Value": "data-3",
                        "PropagateAtLaunch": true
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": "1",
                    "Timeout": "PT60M"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": 0,
                    "MaxBatchSize": 1,
                    "PauseTime": "PT10M",
                    "WaitOnResourceSignals": true
                }
            }
        },
        "DataNodeEni04": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "ENI for data node one ASG",
                "GroupSet": [
                    {
                        "Ref": "InfluxDBInternalSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Ref": "Subnet01"
                }
            }
        },
        "DataNodeDns04": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "DataNodeEni04",
                            "PrimaryPrivateIpAddress"
                        ]
                    }
                ],
                "HostedZoneId": {
                    "Ref": "InfluxDBPrivateHostedZone"
                },
                "Name": "data-4.influxdb.internal",
                "Type": "A",
                "TTL": "60"
            }
        },
        "DataNodeVolume04": {
            "Type": "AWS::EC2::Volume",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::GetAtt": [
                        "Subnet01",
                        "AvailabilityZone"
                    ]
                },
                "Size": {
                    "Ref": "DataNodeDiskSize"
                },
                "VolumeType": "io1",
                "Iops": {
                    "Ref": "DataNodeDiskIops"
                },
                "AutoEnableIO": true,
                "Encrypted": true
            },
            "DeletionPolicy": "Snapshot"
        },
        "DataNodeAutoScalingGroup04": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Ref": "Subnet01"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "DataNodeLaunchConfiguration"
                },
                "DesiredCapacity": "1",
                "MinSize": "0",
                "MaxSize": "1",
                "TargetGroupARNs": [
                    {
                        "Ref": "InfluxDBLoadBalancerTargetGroup"
                    }
                ],
                "Tags": [
                    {
                        "Key": "influxdb-eni",
                        "Value": {
                            "Ref": "DataNodeEni04"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "influxdb-volume",
                        "Value": {
                            "Ref": "DataNodeVolume04"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "influxdb-hostname",
                        "Value": {
                            "Ref": "DataNodeDns04"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "Name",
                        "Value": "data-4",
                        "PropagateAtLaunch": true
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": "1",
                    "Timeout": "PT60M"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": 0,
                    "MaxBatchSize": 1,
                    "PauseTime": "PT10M",
                    "WaitOnResourceSignals": true
                }
            }
        },
        "MonitorLaunchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "configSets": {
                        "SetupNode": [
                            "SetAWSCLIRegion",
                            "SetHostnames",
                            "SetMonitor",
                            "SetKapacitor",
                            "AttachNetwork",
                            "AttachVolume",
                            "MountVolume",
                            "StartInfluxDB",
                            "StartTelegraf",
                            "StartChronograf",
                            "StartKapacitor",
                            "ConfigureCluster"
                        ]
                    },
                    "SetAWSCLIRegion": {
                        "files": {
                            "/root/.aws/config": {
                                "content": {
                                    "Fn::Sub": "[default]\nregion = ${AWS::Region}\n"
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    },
                    "SetHostnames": {
                        "commands": {
                            "01_set_instance_hostname": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "set -x",
                                            "\n",
                                            "INFLUXDB_HOSTNAME=$( aws ec2 describe-tags",
                                            "        --filters \"Name=resource-id,Values=$INSTANCE_ID\"",
                                            "        --query \"Tags[?Key=='influxdb-hostname'].Value\"",
                                            "        --output text )",
                                            "\n",
                                            "echo \"INFLUXDB_HOSTNAME=$INFLUXDB_HOSTNAME\" >> /etc/default/influxdb",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "SetMonitor": {
                        "files": {
                            "/etc/default/telegraf": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "MONITOR_HOSTNAME=",
                                            {
                                                "Ref": "MonitorDns"
                                            },
                                            "\n",
                                            "MONITOR_USERNAME=",
                                            {
                                                "Ref": "Username"
                                            },
                                            "\n",
                                            "MONITOR_PASSWORD=",
                                            {
                                                "Ref": "Password"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    },
                    "SetKapacitor": {
                        "files": {
                            "/etc/default/kapacitor": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "KAPACITOR_INFLUXDB_0_URLS_0=http://",
                                            {
                                                "Ref": "MonitorDns"
                                            },
                                            ":8086\n",
                                            "KAPACITOR_INFLUXDB_0_NAME=",
                                            {
                                                "Ref": "MonitorDns"
                                            },
                                            "\n",
                                            "KAPACITOR_INFLUXDB_0_USERNAME=",
                                            {
                                                "Ref": "Username"
                                            },
                                            "\n",
                                            "KAPACITOR_INFLUXDB_0_PASSWORD=",
                                            {
                                                "Ref": "Password"
                                            },
                                            "\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    },
                    "AttachNetwork": {
                        "commands": {
                            "01_attach_network": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "set -x",
                                            "\n",
                                            "# If network interface is not attached to this instance, then attach it",
                                            "\n",
                                            "ENI_ID=$( aws ec2 describe-tags",
                                            "        --filters \"Name=resource-id,Values=$INSTANCE_ID\"",
                                            "        --query \"Tags[?Key=='influxdb-eni'].Value\"",
                                            "        --output text )",
                                            "\n",
                                            "STATUS=$( aws ec2 describe-network-interfaces",
                                            "        --network-interface-ids $ENI_ID",
                                            "        --filters \"Name=attachment.instance-id,Values=$INSTANCE_ID\"",
                                            "        --query \"NetworkInterfaces[0].Attachment.Status\"",
                                            "        --output text )",
                                            "\n",
                                            "# TODO: switch to until 'attached' loop",
                                            "\n",
                                            "if ! [[ $STATUS =~ (attached|attaching) ]]; then",
                                            "\n",
                                            "# Wait until network interface is available",
                                            "\n",
                                            "aws ec2 wait network-interface-available",
                                            "        --network-interface-ids $ENI_ID",
                                            "\n",
                                            "aws ec2 attach-network-interface",
                                            "        --network-interface-id $ENI_ID",
                                            "        --instance-id $INSTANCE_ID",
                                            "        --device-index 1",
                                            "\n",
                                            "# Reload network to automatically enable eth1 via Amazon Linux 2 ec2-net-utils",
                                            "\n",
                                            "systemctl restart network",
                                            "\n",
                                            "fi",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "AttachVolume": {
                        "commands": {
                            "01_attach_volume": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "set -x",
                                            "\n",
                                            "# If EBS volume is not attached to this instance, then attach it",
                                            "\n",
                                            "VOLUME_ID=$( aws ec2 describe-tags",
                                            "        --filters \"Name=resource-id,Values=$INSTANCE_ID\"",
                                            "        --query \"Tags[?Key=='influxdb-volume'].Value\"",
                                            "        --output text )",
                                            "\n",
                                            "STATUS=$( aws ec2 describe-volumes",
                                            "        --volume-ids $VOLUME_ID",
                                            "        --filters \"Name=attachment.instance-id,Values=$INSTANCE_ID\"",
                                            "        --query \"Volumes[0].Attachments[0].State\"",
                                            "        --output text )",
                                            "\n",
                                            "if ! [[ $STATUS =~ (attached|attaching) ]]; then",
                                            "\n",
                                            "# Wait until volume is available",
                                            "\n",
                                            "aws ec2 wait volume-available",
                                            "        --volume-ids $VOLUME_ID",
                                            "\n",
                                            "aws ec2 attach-volume",
                                            "        --volume-id $VOLUME_ID",
                                            "        --instance-id $INSTANCE_ID",
                                            "        --device /dev/xvdh",
                                            "\n",
                                            "until [[ \"$(",
                                            "aws ec2 describe-volume-status",
                                            "        --volume-ids $VOLUME_ID",
                                            "        --query 'VolumeStatuses[0].VolumeStatus.Details[?Name==`io-enabled`].Status'",
                                            "        --output text",
                                            ")\" == 'passed' ]]; do sleep 5; done",
                                            "\n",
                                            "fi",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "MountVolume": {
                        "commands": {
                            "01_mount_volumes": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "set -x",
                                            "\n",
                                            "/sbin/ebsnvme-id -b /dev/nvme1n1",
                                            "\n",
                                            "until [ -b $(readlink -f /dev/xvdh) ]; do sleep 1; done",
                                            "\n",
                                            "if [[ \"$(lsblk -no FSTYPE /dev/xvdh)\" != \"ext4\" ]]; then",
                                            "\n",
                                            "/usr/sbin/mkfs -t ext4 /dev/xvdh",
                                            "\n",
                                            "sleep 10",
                                            "\n",
                                            "fi",
                                            "\n",
                                            "mkdir -p /influxdb",
                                            "\n",
                                            "mount /dev/xvdh /influxdb",
                                            "\n",
                                            "/sbin/resize2fs /dev/xvdh",
                                            "\n",
                                            "mkdir -p /influxdb/meta /influxdb /influxdb/wal /influxdb/hh",
                                            "\n",
                                            "chown -R influxdb:influxdb /influxdb",
                                            "\n",
                                            "chown -R kapacitor:kapacitor /var/log/kapacitor",
                                            "\n",
                                            "mkdir -p /influxdb/kapacitor",
                                            "\n",
                                            "chown -R kapacitor:kapacitor /influxdb/kapacitor",
                                            "\n"
                                        ]
                                    ]
                                }
                            },
                            "02_set_fstab": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "set -x",
                                            "\n",
                                            "DEVICE_UUID=\"$(blkid -s UUID -o value /dev/xvdh)\"",
                                            "\n",
                                            "if grep -q \"$DEVICE_UUID\" /etc/fstab; then",
                                            "\n",
                                            "echo \"fstab already set\"",
                                            "\n",
                                            "else",
                                            "\n",
                                            "cp /etc/fstab /etc/fstab.original",
                                            "\n",
                                            "echo -e \"UUID=$DEVICE_UUID\t/influxdb\text4\tdefaults,nofail\t0\t2\" >> /etc/fstab",
                                            "\n",
                                            "fi",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    },
                    "StartInfluxDB": {
                        "commands": {
                            "01_enable_influxdb_service": {
                                "command": "systemctl enable influxdb"
                            },
                            "02_start_influxdb_service": {
                                "command": "systemctl start influxdb"
                            }
                        }
                    },
                    "StartTelegraf": {
                        "commands": {
                            "01_enable_telegraf_service": {
                                "command": "systemctl enable telegraf"
                            },
                            "02_start_telegraf_service": {
                                "command": "systemctl start telegraf"
                            }
                        }
                    },
                    "StartChronograf": {
                        "commands": {
                            "01_enable_chronograf_service": {
                                "command": "systemctl enable chronograf"
                            },
                            "02_start_chronograf_service": {
                                "command": "systemctl start chronograf"
                            }
                        }
                    },
                    "StartKapacitor": {
                        "commands": {
                            "01_enable_kapacitor_service": {
                                "command": "systemctl enable kapacitor"
                            },
                            "02_start_kapacitor_service": {
                                "command": "service kapacitor start"
                            }
                        }
                    },
                    "ConfigureCluster": {
                        "commands": {
                            "01_create_influxdb_user": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "set -x",
                                            "\n",
                                            "# Wait until InfluxDB monitor is listening",
                                            "\n",
                                            "while [[ \"",
                                            "$(curl -s -o /dev/null -w ''%{http_code}'' monitor.influxdb.internal:8086/ping)",
                                            "\" != '204' ]]; do sleep 5; done",
                                            "\n",
                                            "curl -u ",
                                            {
                                                "Ref": "Username"
                                            },
                                            ":",
                                            {
                                                "Ref": "Password"
                                            },
                                            " \"http://",
                                            {
                                                "Ref": "MonitorDns"
                                            },
                                            ":8086/query\"",
                                            "        --data-urlencode \"q=",
                                            "CREATE USER ",
                                            {
                                                "Ref": "Username"
                                            },
                                            " WITH PASSWORD '",
                                            {
                                                "Ref": "Password"
                                            },
                                            "' WITH ALL PRIVILEGES",
                                            "\"",
                                            "\n",
                                            "curl -u ",
                                            {
                                                "Ref": "Username"
                                            },
                                            ":",
                                            {
                                                "Ref": "Password"
                                            },
                                            " http://",
                                            {
                                                "Ref": "MonitorDns"
                                            },
                                            ":8086/query",
                                            "        --data-urlencode 'q=CREATE DATABASE telegraf WITH DURATION 30d SHARD DURATION 7d'",
                                            "\n"
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "Monitor"
                    ]
                },
                "InstanceType": {
                    "Ref": "MonitorInstanceType"
                },
                "SecurityGroups": [
                    {
                        "Ref": "SshSecurityGroup"
                    },
                    {
                        "Ref": "InfluxDBInternalSecurityGroup"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "IamInstanceProfile": {
                    "Ref": "InfluxDBInstanceProfile"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/usr/bin/env bash",
                                "\n",
                                "set -euxo pipefail",
                                "\n",
                                "yum update -y aws-cfn-bootstrap ec2-net-utils",
                                "\n",
                                "export INSTANCE_ID=$( curl -s http://169.254.169.254/latest/meta-data/instance-id )",
                                "\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "        --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "        --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "        --resource MonitorLaunchConfiguration ",
                                "        --configsets SetupNode",
                                "\n",
                                "ASG_NAME=$( aws ec2 describe-tags",
                                "        --filters \"Name=resource-id,Values=$INSTANCE_ID\"",
                                "        --query \"Tags[?Key=='aws:cloudformation:logical-id'].Value\"",
                                "        --output text )",
                                "\n",
                                "# Signal the status from cfn-init\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "        --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "        --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "        --resource $ASG_NAME",
                                "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "MonitorEni": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "ENI for data node one ASG",
                "GroupSet": [
                    {
                        "Ref": "InfluxDBInternalSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Ref": "Subnet02"
                }
            }
        },
        "MonitorDns": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "ResourceRecords": [
                    {
                        "Fn::GetAtt": [
                            "MonitorEni",
                            "PrimaryPrivateIpAddress"
                        ]
                    }
                ],
                "HostedZoneId": {
                    "Ref": "InfluxDBPrivateHostedZone"
                },
                "Name": "monitor.influxdb.internal",
                "Type": "A",
                "TTL": "60"
            }
        },
        "MonitorVolume": {
            "Type": "AWS::EC2::Volume",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::GetAtt": [
                        "Subnet02",
                        "AvailabilityZone"
                    ]
                },
                "Size": 100,
                "VolumeType": "gp2",
                "AutoEnableIO": true,
                "Encrypted": true
            },
            "DeletionPolicy": "Snapshot"
        },
        "MonitorAutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Ref": "Subnet02"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "MonitorLaunchConfiguration"
                },
                "DesiredCapacity": "1",
                "MinSize": "0",
                "MaxSize": "1",
                "Tags": [
                    {
                        "Key": "influxdb-eni",
                        "Value": {
                            "Ref": "MonitorEni"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "influxdb-volume",
                        "Value": {
                            "Ref": "MonitorVolume"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "influxdb-hostname",
                        "Value": {
                            "Ref": "MonitorDns"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "Name",
                        "Value": "monitor",
                        "PropagateAtLaunch": true
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Count": "1",
                    "Timeout": "PT60M"
                }
            },
            "UpdatePolicy": {
                "AutoScalingRollingUpdate": {
                    "MinInstancesInService": 0,
                    "MaxBatchSize": 1,
                    "PauseTime": "PT10M",
                    "WaitOnResourceSignals": true
                }
            }
        }
    }
}