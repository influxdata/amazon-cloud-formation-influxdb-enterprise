// generated by cdk-dasm at 2020-09-22T08:18:37.544Z

import { Stack, StackProps, Construct, Fn } from '@aws-cdk/core';
import ec2 = require('@aws-cdk/aws-ec2');
import route53 = require('@aws-cdk/aws-route53');
import elasticloadbalancingv2 = require('@aws-cdk/aws-elasticloadbalancingv2');
import iam = require('@aws-cdk/aws-iam');
import autoscaling = require('@aws-cdk/aws-autoscaling');

export class MyStack extends Stack {
    constructor(scope: Construct, id: string, props: StackProps = {}) {
        super(scope, id, props);
        new ec2.CfnVPC(this, 'VPC', {
            cidrBlock: {
              "Fn::Sub": "10.${VpcClassB}.0.0/16"
            },
            enableDnsSupport: true,
            enableDnsHostnames: true,
            instanceTenancy: "default",
        });
        new ec2.CfnInternetGateway(this, 'InternetGateway');
        new ec2.CfnVPCGatewayAttachment(this, 'VPCGatewayAttachment', {
            internetGatewayId: {
              "Ref": "InternetGateway"
            },
            vpcId: {
              "Ref": "VPC"
            },
        });
        new ec2.CfnRouteTable(this, 'RouteTable', {
            vpcId: {
              "Ref": "VPC"
            },
        });
        new ec2.CfnRoute(this, 'Route', {
            routeTableId: {
              "Ref": "RouteTable"
            },
            destinationCidrBlock: "0.0.0.0/0",
            gatewayId: {
              "Ref": "InternetGateway"
            },
        });
        new ec2.CfnSubnet(this, 'Subnet00', {
            vpcId: {
              "Ref": "VPC"
            },
            cidrBlock: {
              "Fn::Sub": "10.${VpcClassB}.0.0/20"
            },
            availabilityZone: {
              "Fn::Select": [
                "0",
                {
                  "Fn::GetAZs": ""
                }
              ]
            },
            mapPublicIpOnLaunch: true,
        });
        new ec2.CfnSubnetRouteTableAssociation(this, 'Subnet00RouteTableAssociation', {
            subnetId: {
              "Ref": "Subnet00"
            },
            routeTableId: {
              "Ref": "RouteTable"
            },
        });
        new ec2.CfnSubnet(this, 'Subnet01', {
            vpcId: {
              "Ref": "VPC"
            },
            cidrBlock: {
              "Fn::Sub": "10.${VpcClassB}.16.0/20"
            },
            availabilityZone: {
              "Fn::Select": [
                "1",
                {
                  "Fn::GetAZs": ""
                }
              ]
            },
            mapPublicIpOnLaunch: true,
        });
        new ec2.CfnSubnetRouteTableAssociation(this, 'Subnet01RouteTableAssociation', {
            subnetId: {
              "Ref": "Subnet01"
            },
            routeTableId: {
              "Ref": "RouteTable"
            },
        });
        new ec2.CfnSubnet(this, 'Subnet02', {
            vpcId: {
              "Ref": "VPC"
            },
            cidrBlock: {
              "Fn::Sub": "10.${VpcClassB}.32.0/20"
            },
            availabilityZone: {
              "Fn::Select": [
                "2",
                {
                  "Fn::GetAZs": ""
                }
              ]
            },
            mapPublicIpOnLaunch: true,
        });
        new ec2.CfnSubnetRouteTableAssociation(this, 'Subnet02RouteTableAssociation', {
            subnetId: {
              "Ref": "Subnet02"
            },
            routeTableId: {
              "Ref": "RouteTable"
            },
        });
        new route53.CfnHostedZone(this, 'InfluxDBPrivateHostedZone', {
            name: "internal",
            vpCs: [
              {
                "vpcId": {
                  "Ref": "VPC"
                },
                "vpcRegion": {
                  "Ref": "AWS::Region"
                }
              }
            ],
        });
        new route53.CfnRecordSet(this, 'InfluxDBLoadBalancerRecordSet', {
            aliasTarget: {
              "dnsName": {
                "Fn::GetAtt": [
                  "InfluxDBLoadBalancer",
                  "DNSName"
                ]
              },
              "hostedZoneId": {
                "Fn::GetAtt": [
                  "InfluxDBLoadBalancer",
                  "CanonicalHostedZoneID"
                ]
              }
            },
            hostedZoneId: {
              "Ref": "InfluxDBPrivateHostedZone"
            },
            name: "influxdb.internal",
            type: "A",
        });
        new elasticloadbalancingv2.CfnLoadBalancer(this, 'InfluxDBLoadBalancer', {
            securityGroups: [
              {
                "Ref": "InfluxDBALBSecurityGroup"
              }
            ],
            subnets: [
              {
                "Ref": "Subnet00"
              },
              {
                "Ref": "Subnet01"
              },
              {
                "Ref": "Subnet02"
              }
            ],
        });
        new elasticloadbalancingv2.CfnListener(this, 'InfluxDBLoadBalancerListener', {
            defaultActions: [
              {
                "type": "forward",
                "targetGroupArn": {
                  "Ref": "InfluxDBLoadBalancerTargetGroup"
                }
              }
            ],
            loadBalancerArn: {
              "Ref": "InfluxDBLoadBalancer"
            },
            port: 8086,
            protocol: "HTTP",
        });
        new elasticloadbalancingv2.CfnTargetGroup(this, 'InfluxDBLoadBalancerTargetGroup', {
            healthCheckIntervalSeconds: 30,
            healthCheckPath: "/ping",
            healthCheckPort: "8086",
            healthCheckProtocol: "HTTP",
            healthCheckTimeoutSeconds: 10,
            healthyThresholdCount: 2,
            matcher: {
              "httpCode": "204"
            },
            port: 8086,
            protocol: "HTTP",
            unhealthyThresholdCount: 2,
            vpcId: {
              "Ref": "VPC"
            },
        });
        new iam.CfnInstanceProfile(this, 'InfluxDBInstanceProfile', {
            roles: [
              {
                "Ref": "InfluxDBRole"
              }
            ],
        });
        new iam.CfnRole(this, 'InfluxDBRole', {
            assumeRolePolicyDocument: {
              "version": "2012-10-17",
              "statement": [
                {
                  "effect": "Allow",
                  "principal": {
                    "service": [
                      "ec2.amazonaws.com"
                    ]
                  },
                  "action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            policies: [
              {
                "policyName": "InfluxDBPolicy",
                "policyDocument": {
                  "version": "2012-10-17",
                  "statement": [
                    {
                      "effect": "Allow",
                      "action": [
                        "ec2:AttachNetworkInterface",
                        "ec2:AttachVolume",
                        "ec2:DescribeVolumes",
                        "ec2:DescribeVolumeStatus",
                        "ec2:DescribeInstances",
                        "ec2:DescribeNetworkInterfaces",
                        "ec2:DescribeTags",
                        "autoscaling:DescribeAutoScalingGroups"
                      ],
                      "resource": "*"
                    }
                  ]
                }
              }
            ],
        });
        new ec2.CfnSecurityGroup(this, 'SshSecurityGroup', {
            groupDescription: "Allow external SSH traffic from SSHLocation",
            securityGroupIngress: [
              {
                "ipProtocol": "tcp",
                "fromPort": 22,
                "toPort": 22,
                "cidrIp": {
                  "Ref": "SSHLocation"
                }
              }
            ],
            vpcId: {
              "Ref": "VPC"
            },
        });
        new ec2.CfnSecurityGroup(this, 'InfluxDBALBSecurityGroup', {
            groupDescription: "Allow traffic from public internet to go to port 8086 on InfluxDB data nodes",
            vpcId: {
              "Ref": "VPC"
            },
        });
        new ec2.CfnSecurityGroupIngress(this, 'InfluxDBALBSGIngress', {
            groupId: {
              "Ref": "InfluxDBALBSecurityGroup"
            },
            ipProtocol: "tcp",
            fromPort: 8086,
            toPort: 8086,
            cidrIp: {
              "Ref": "InfluxDBIngressCIDR"
            },
        });
        new ec2.CfnSecurityGroupEgress(this, 'InfluxDBALBSGEgress', {
            groupId: {
              "Ref": "InfluxDBALBSecurityGroup"
            },
            ipProtocol: "tcp",
            fromPort: 8086,
            toPort: 8086,
            destinationSecurityGroupId: {
              "Ref": "InfluxDBDataNodeSecurityGroup"
            },
        });
        new ec2.CfnSecurityGroup(this, 'InfluxDBDataNodeSecurityGroup', {
            groupDescription: "Allow traffic from ALB to go to port 8086 on InfluxDB data nodes",
            vpcId: {
              "Ref": "VPC"
            },
        });
        new ec2.CfnSecurityGroupIngress(this, 'InfluxDBDataNodeSGIngress', {
            groupId: {
              "Ref": "InfluxDBDataNodeSecurityGroup"
            },
            ipProtocol: "tcp",
            fromPort: 8086,
            toPort: 8086,
            sourceSecurityGroupId: {
              "Ref": "InfluxDBALBSecurityGroup"
            },
        });
        new ec2.CfnSecurityGroup(this, 'InfluxDBInternalSecurityGroup', {
            groupDescription: "Allow all traffic between InfluxDB instances",
            vpcId: {
              "Ref": "VPC"
            },
        });
        new ec2.CfnSecurityGroupIngress(this, 'InfluxDBInternalSGIngress', {
            groupId: {
              "Ref": "InfluxDBInternalSecurityGroup"
            },
            ipProtocol: "-1",
            sourceSecurityGroupId: {
              "Ref": "InfluxDBInternalSecurityGroup"
            },
        });
        new ec2.CfnSecurityGroupEgress(this, 'InfluxDBInternalSGEgress', {
            groupId: {
              "Ref": "InfluxDBInternalSecurityGroup"
            },
            ipProtocol: "-1",
            destinationSecurityGroupId: {
              "Ref": "InfluxDBInternalSecurityGroup"
            },
        });
        new autoscaling.CfnLaunchConfiguration(this, 'MetaNodeLaunchConfiguration', {
            imageId: {
              "Fn::FindInMap": [
                "AMIRegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "Meta"
              ]
            },
            instanceType: {
              "Ref": "MetaNodeInstanceType"
            },
            securityGroups: [
              {
                "Ref": "SshSecurityGroup"
              },
              {
                "Ref": "InfluxDBInternalSecurityGroup"
              }
            ],
            keyName: {
              "Ref": "KeyName"
            },
            iamInstanceProfile: {
              "Ref": "InfluxDBInstanceProfile"
            },
            userData: {
              "Fn::Base64": {
                "Fn::Join": [
                  "",
                  [
                    "#!/usr/bin/env bash",
                    "\n",
                    "set -euxo pipefail",
                    "\n",
                    "yum update -y aws-cfn-bootstrap ec2-net-utils",
                    "\n",
                    "export INSTANCE_ID=$( curl -s http://169.254.169.254/latest/meta-data/instance-id )",
                    "\n",
                    "/opt/aws/bin/cfn-init -v ",
                    "        --stack ",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "        --region ",
                    {
                      "Ref": "AWS::Region"
                    },
                    "        --resource MetaNodeLaunchConfiguration ",
                    "        --configsets SetupNode",
                    "\n",
                    "ASG_NAME=$( aws ec2 describe-tags",
                    "        --filters \"Name=resource-id,Values=$INSTANCE_ID\"",
                    "        --query \"Tags[?Key=='aws:cloudformation:logical-id'].Value\"",
                    "        --output text )",
                    "\n",
                    "# Signal the status from cfn-init\n",
                    "/opt/aws/bin/cfn-signal -e $? ",
                    "        --stack ",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "        --region ",
                    {
                      "Ref": "AWS::Region"
                    },
                    "        --resource $ASG_NAME",
                    "\n"
                  ]
                ]
              }
            },
        });
        new ec2.CfnNetworkInterface(this, 'MetaNodeEni00', {
            description: "ENI for data node one ASG",
            groupSet: [
              {
                "Ref": "InfluxDBInternalSecurityGroup"
              }
            ],
            subnetId: {
              "Ref": "Subnet00"
            },
        });
        new route53.CfnRecordSet(this, 'MetaNodeDns00', {
            resourceRecords: [
              {
                "Fn::GetAtt": [
                  "MetaNodeEni00",
                  "PrimaryPrivateIpAddress"
                ]
              }
            ],
            hostedZoneId: {
              "Ref": "InfluxDBPrivateHostedZone"
            },
            name: "meta-0.influxdb.internal",
            type: "A",
            ttl: "60",
        });
        new ec2.CfnVolume(this, 'MetaNodeVolume00', {
            availabilityZone: {
              "Fn::GetAtt": [
                "Subnet00",
                "AvailabilityZone"
              ]
            },
            size: 25,
            volumeType: "gp2",
            autoEnableIo: true,
            encrypted: true,
        });
        new autoscaling.CfnAutoScalingGroup(this, 'MetaNodeAutoScalingGroup00', {
            vpcZoneIdentifier: [
              {
                "Ref": "Subnet00"
              }
            ],
            launchConfigurationName: {
              "Ref": "MetaNodeLaunchConfiguration"
            },
            desiredCapacity: "1",
            minSize: "0",
            maxSize: "1",
            tags: [
              {
                "key": "influxdb-eni",
                "value": {
                  "Ref": "MetaNodeEni00"
                },
                "propagateAtLaunch": true
              },
              {
                "key": "influxdb-volume",
                "value": {
                  "Ref": "MetaNodeVolume00"
                },
                "propagateAtLaunch": true
              },
              {
                "key": "influxdb-hostname",
                "value": {
                  "Ref": "MetaNodeDns00"
                },
                "propagateAtLaunch": true
              },
              {
                "key": "Name",
                "value": "meta-0",
                "propagateAtLaunch": true
              },
              {
                "key": "influxdb-leader",
                "value": "true",
                "propagateAtLaunch": true
              }
            ],
        });
        new ec2.CfnNetworkInterface(this, 'MetaNodeEni01', {
            description: "ENI for data node one ASG",
            groupSet: [
              {
                "Ref": "InfluxDBInternalSecurityGroup"
              }
            ],
            subnetId: {
              "Ref": "Subnet01"
            },
        });
        new route53.CfnRecordSet(this, 'MetaNodeDns01', {
            resourceRecords: [
              {
                "Fn::GetAtt": [
                  "MetaNodeEni01",
                  "PrimaryPrivateIpAddress"
                ]
              }
            ],
            hostedZoneId: {
              "Ref": "InfluxDBPrivateHostedZone"
            },
            name: "meta-1.influxdb.internal",
            type: "A",
            ttl: "60",
        });
        new ec2.CfnVolume(this, 'MetaNodeVolume01', {
            availabilityZone: {
              "Fn::GetAtt": [
                "Subnet01",
                "AvailabilityZone"
              ]
            },
            size: 20,
            volumeType: "gp2",
            autoEnableIo: true,
            encrypted: true,
        });
        new autoscaling.CfnAutoScalingGroup(this, 'MetaNodeAutoScalingGroup01', {
            vpcZoneIdentifier: [
              {
                "Ref": "Subnet01"
              }
            ],
            launchConfigurationName: {
              "Ref": "MetaNodeLaunchConfiguration"
            },
            desiredCapacity: "1",
            minSize: "0",
            maxSize: "1",
            tags: [
              {
                "key": "influxdb-eni",
                "value": {
                  "Ref": "MetaNodeEni01"
                },
                "propagateAtLaunch": true
              },
              {
                "key": "influxdb-volume",
                "value": {
                  "Ref": "MetaNodeVolume01"
                },
                "propagateAtLaunch": true
              },
              {
                "key": "influxdb-hostname",
                "value": {
                  "Ref": "MetaNodeDns01"
                },
                "propagateAtLaunch": true
              },
              {
                "key": "Name",
                "value": "meta-1",
                "propagateAtLaunch": true
              }
            ],
        });
        new ec2.CfnNetworkInterface(this, 'MetaNodeEni02', {
            description: "ENI for data node one ASG",
            groupSet: [
              {
                "Ref": "InfluxDBInternalSecurityGroup"
              }
            ],
            subnetId: {
              "Ref": "Subnet02"
            },
        });
        new route53.CfnRecordSet(this, 'MetaNodeDns02', {
            resourceRecords: [
              {
                "Fn::GetAtt": [
                  "MetaNodeEni02",
                  "PrimaryPrivateIpAddress"
                ]
              }
            ],
            hostedZoneId: {
              "Ref": "InfluxDBPrivateHostedZone"
            },
            name: "meta-2.influxdb.internal",
            type: "A",
            ttl: "60",
        });
        new ec2.CfnVolume(this, 'MetaNodeVolume02', {
            availabilityZone: {
              "Fn::GetAtt": [
                "Subnet02",
                "AvailabilityZone"
              ]
            },
            size: 20,
            volumeType: "gp2",
            autoEnableIo: true,
            encrypted: true,
        });
        new autoscaling.CfnAutoScalingGroup(this, 'MetaNodeAutoScalingGroup02', {
            vpcZoneIdentifier: [
              {
                "Ref": "Subnet02"
              }
            ],
            launchConfigurationName: {
              "Ref": "MetaNodeLaunchConfiguration"
            },
            desiredCapacity: "1",
            minSize: "0",
            maxSize: "1",
            tags: [
              {
                "key": "influxdb-eni",
                "value": {
                  "Ref": "MetaNodeEni02"
                },
                "propagateAtLaunch": true
              },
              {
                "key": "influxdb-volume",
                "value": {
                  "Ref": "MetaNodeVolume02"
                },
                "propagateAtLaunch": true
              },
              {
                "key": "influxdb-hostname",
                "value": {
                  "Ref": "MetaNodeDns02"
                },
                "propagateAtLaunch": true
              },
              {
                "key": "Name",
                "value": "meta-2",
                "propagateAtLaunch": true
              }
            ],
        });
        new autoscaling.CfnLaunchConfiguration(this, 'DataNodeLaunchConfiguration', {
            imageId: {
              "Fn::FindInMap": [
                "AMIRegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "Data"
              ]
            },
            instanceType: {
              "Ref": "DataNodeInstanceType"
            },
            securityGroups: [
              {
                "Ref": "SshSecurityGroup"
              },
              {
                "Ref": "InfluxDBInternalSecurityGroup"
              },
              {
                "Ref": "InfluxDBDataNodeSecurityGroup"
              }
            ],
            keyName: {
              "Ref": "KeyName"
            },
            ebsOptimized: true,
            iamInstanceProfile: {
              "Ref": "InfluxDBInstanceProfile"
            },
            userData: {
              "Fn::Base64": {
                "Fn::Join": [
                  "",
                  [
                    "#!/usr/bin/env bash",
                    "\n",
                    "set -euxo pipefail",
                    "\n",
                    "yum update -y aws-cfn-bootstrap ec2-net-utils",
                    "\n",
                    "export INSTANCE_ID=$( curl -s http://169.254.169.254/latest/meta-data/instance-id )",
                    "\n",
                    "/opt/aws/bin/cfn-init -v ",
                    "        --stack ",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "        --region ",
                    {
                      "Ref": "AWS::Region"
                    },
                    "        --resource DataNodeLaunchConfiguration ",
                    "        --configsets SetupNode",
                    "\n",
                    "ASG_NAME=$( aws ec2 describe-tags",
                    "        --filters \"Name=resource-id,Values=$INSTANCE_ID\"",
                    "        --query \"Tags[?Key=='aws:cloudformation:logical-id'].Value\"",
                    "        --output text )",
                    "\n",
                    "# Signal the status from cfn-init\n",
                    "/opt/aws/bin/cfn-signal -e $? ",
                    "        --stack ",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "        --region ",
                    {
                      "Ref": "AWS::Region"
                    },
                    "        --resource $ASG_NAME",
                    "\n"
                  ]
                ]
              }
            },
        });
        new ec2.CfnNetworkInterface(this, 'DataNodeEni03', {
            description: "ENI for data node one ASG",
            groupSet: [
              {
                "Ref": "InfluxDBInternalSecurityGroup"
              }
            ],
            subnetId: {
              "Ref": "Subnet00"
            },
        });
        new route53.CfnRecordSet(this, 'DataNodeDns03', {
            resourceRecords: [
              {
                "Fn::GetAtt": [
                  "DataNodeEni03",
                  "PrimaryPrivateIpAddress"
                ]
              }
            ],
            hostedZoneId: {
              "Ref": "InfluxDBPrivateHostedZone"
            },
            name: "data-3.influxdb.internal",
            type: "A",
            ttl: "60",
        });
        new ec2.CfnVolume(this, 'DataNodeVolume03', {
            availabilityZone: {
              "Fn::GetAtt": [
                "Subnet00",
                "AvailabilityZone"
              ]
            },
            size: {
              "Ref": "DataNodeDiskSize"
            },
            volumeType: "io1",
            iops: {
              "Ref": "DataNodeDiskIops"
            },
            autoEnableIo: true,
            encrypted: true,
        });
        new autoscaling.CfnAutoScalingGroup(this, 'DataNodeAutoScalingGroup03', {
            vpcZoneIdentifier: [
              {
                "Ref": "Subnet00"
              }
            ],
            launchConfigurationName: {
              "Ref": "DataNodeLaunchConfiguration"
            },
            desiredCapacity: "1",
            minSize: "0",
            maxSize: "1",
            targetGroupArNs: [
              {
                "Ref": "InfluxDBLoadBalancerTargetGroup"
              }
            ],
            tags: [
              {
                "key": "influxdb-eni",
                "value": {
                  "Ref": "DataNodeEni03"
                },
                "propagateAtLaunch": true
              },
              {
                "key": "influxdb-volume",
                "value": {
                  "Ref": "DataNodeVolume03"
                },
                "propagateAtLaunch": true
              },
              {
                "key": "influxdb-hostname",
                "value": {
                  "Ref": "DataNodeDns03"
                },
                "propagateAtLaunch": true
              },
              {
                "key": "Name",
                "value": "data-3",
                "propagateAtLaunch": true
              }
            ],
        });
        new ec2.CfnNetworkInterface(this, 'DataNodeEni04', {
            description: "ENI for data node one ASG",
            groupSet: [
              {
                "Ref": "InfluxDBInternalSecurityGroup"
              }
            ],
            subnetId: {
              "Ref": "Subnet01"
            },
        });
        new route53.CfnRecordSet(this, 'DataNodeDns04', {
            resourceRecords: [
              {
                "Fn::GetAtt": [
                  "DataNodeEni04",
                  "PrimaryPrivateIpAddress"
                ]
              }
            ],
            hostedZoneId: {
              "Ref": "InfluxDBPrivateHostedZone"
            },
            name: "data-4.influxdb.internal",
            type: "A",
            ttl: "60",
        });
        new ec2.CfnVolume(this, 'DataNodeVolume04', {
            availabilityZone: {
              "Fn::GetAtt": [
                "Subnet01",
                "AvailabilityZone"
              ]
            },
            size: {
              "Ref": "DataNodeDiskSize"
            },
            volumeType: "io1",
            iops: {
              "Ref": "DataNodeDiskIops"
            },
            autoEnableIo: true,
            encrypted: true,
        });
        new autoscaling.CfnAutoScalingGroup(this, 'DataNodeAutoScalingGroup04', {
            vpcZoneIdentifier: [
              {
                "Ref": "Subnet01"
              }
            ],
            launchConfigurationName: {
              "Ref": "DataNodeLaunchConfiguration"
            },
            desiredCapacity: "1",
            minSize: "0",
            maxSize: "1",
            targetGroupArNs: [
              {
                "Ref": "InfluxDBLoadBalancerTargetGroup"
              }
            ],
            tags: [
              {
                "key": "influxdb-eni",
                "value": {
                  "Ref": "DataNodeEni04"
                },
                "propagateAtLaunch": true
              },
              {
                "key": "influxdb-volume",
                "value": {
                  "Ref": "DataNodeVolume04"
                },
                "propagateAtLaunch": true
              },
              {
                "key": "influxdb-hostname",
                "value": {
                  "Ref": "DataNodeDns04"
                },
                "propagateAtLaunch": true
              },
              {
                "key": "Name",
                "value": "data-4",
                "propagateAtLaunch": true
              }
            ],
        });
        new autoscaling.CfnLaunchConfiguration(this, 'MonitorLaunchConfiguration', {
            imageId: {
              "Fn::FindInMap": [
                "AMIRegionMap",
                {
                  "Ref": "AWS::Region"
                },
                "Monitor"
              ]
            },
            instanceType: {
              "Ref": "MonitorInstanceType"
            },
            securityGroups: [
              {
                "Ref": "SshSecurityGroup"
              },
              {
                "Ref": "InfluxDBInternalSecurityGroup"
              }
            ],
            keyName: {
              "Ref": "KeyName"
            },
            iamInstanceProfile: {
              "Ref": "InfluxDBInstanceProfile"
            },
            userData: {
              "Fn::Base64": {
                "Fn::Join": [
                  "",
                  [
                    "#!/usr/bin/env bash",
                    "\n",
                    "set -euxo pipefail",
                    "\n",
                    "yum update -y aws-cfn-bootstrap ec2-net-utils",
                    "\n",
                    "export INSTANCE_ID=$( curl -s http://169.254.169.254/latest/meta-data/instance-id )",
                    "\n",
                    "/opt/aws/bin/cfn-init -v ",
                    "        --stack ",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "        --region ",
                    {
                      "Ref": "AWS::Region"
                    },
                    "        --resource MonitorLaunchConfiguration ",
                    "        --configsets SetupNode",
                    "\n",
                    "ASG_NAME=$( aws ec2 describe-tags",
                    "        --filters \"Name=resource-id,Values=$INSTANCE_ID\"",
                    "        --query \"Tags[?Key=='aws:cloudformation:logical-id'].Value\"",
                    "        --output text )",
                    "\n",
                    "# Signal the status from cfn-init\n",
                    "/opt/aws/bin/cfn-signal -e $? ",
                    "        --stack ",
                    {
                      "Ref": "AWS::StackName"
                    },
                    "        --region ",
                    {
                      "Ref": "AWS::Region"
                    },
                    "        --resource $ASG_NAME",
                    "\n"
                  ]
                ]
              }
            },
        });
        new ec2.CfnNetworkInterface(this, 'MonitorEni', {
            description: "ENI for data node one ASG",
            groupSet: [
              {
                "Ref": "InfluxDBInternalSecurityGroup"
              }
            ],
            subnetId: {
              "Ref": "Subnet02"
            },
        });
        new route53.CfnRecordSet(this, 'MonitorDns', {
            resourceRecords: [
              {
                "Fn::GetAtt": [
                  "MonitorEni",
                  "PrimaryPrivateIpAddress"
                ]
              }
            ],
            hostedZoneId: {
              "Ref": "InfluxDBPrivateHostedZone"
            },
            name: "monitor.influxdb.internal",
            type: "A",
            ttl: "60",
        });
        new ec2.CfnVolume(this, 'MonitorVolume', {
            availabilityZone: {
              "Fn::GetAtt": [
                "Subnet02",
                "AvailabilityZone"
              ]
            },
            size: 100,
            volumeType: "gp2",
            autoEnableIo: true,
            encrypted: true,
        });
        new autoscaling.CfnAutoScalingGroup(this, 'MonitorAutoScalingGroup', {
            vpcZoneIdentifier: [
              {
                "Ref": "Subnet02"
              }
            ],
            launchConfigurationName: {
              "Ref": "MonitorLaunchConfiguration"
            },
            desiredCapacity: "1",
            minSize: "0",
            maxSize: "1",
            tags: [
              {
                "key": "influxdb-eni",
                "value": {
                  "Ref": "MonitorEni"
                },
                "propagateAtLaunch": true
              },
              {
                "key": "influxdb-volume",
                "value": {
                  "Ref": "MonitorVolume"
                },
                "propagateAtLaunch": true
              },
              {
                "key": "influxdb-hostname",
                "value": {
                  "Ref": "MonitorDns"
                },
                "propagateAtLaunch": true
              },
              {
                "key": "Name",
                "value": "monitor",
                "propagateAtLaunch": true
              }
            ],
        });
    }
}
